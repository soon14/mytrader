// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mdb.proto

#include "mdb.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_mdb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_TableCol_mdb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mdb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TableCol_bool_list_mdb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mdb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TableCol_data_list_mdb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mdb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TableCol_double_list_mdb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mdb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TableCol_float_list_mdb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mdb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TableCol_sint32_list_mdb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mdb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TableCol_sint64_list_mdb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mdb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TableCol_string_list_mdb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mdb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TableCol_uint32_list_mdb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mdb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TableCol_uint64_list_mdb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mdb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TableField_mdb_2eproto;
namespace com {
namespace mdb {
namespace proto {
namespace msg {
class TableFieldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TableField> _instance;
} _TableField_default_instance_;
class StdTableAttrDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StdTableAttr> _instance;
} _StdTableAttr_default_instance_;
class TableCol_bool_listDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TableCol_bool_list> _instance;
} _TableCol_bool_list_default_instance_;
class TableCol_uint32_listDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TableCol_uint32_list> _instance;
} _TableCol_uint32_list_default_instance_;
class TableCol_sint32_listDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TableCol_sint32_list> _instance;
} _TableCol_sint32_list_default_instance_;
class TableCol_uint64_listDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TableCol_uint64_list> _instance;
} _TableCol_uint64_list_default_instance_;
class TableCol_sint64_listDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TableCol_sint64_list> _instance;
} _TableCol_sint64_list_default_instance_;
class TableCol_float_listDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TableCol_float_list> _instance;
} _TableCol_float_list_default_instance_;
class TableCol_double_listDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TableCol_double_list> _instance;
} _TableCol_double_list_default_instance_;
class TableCol_string_listDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TableCol_string_list> _instance;
} _TableCol_string_list_default_instance_;
class TableCol_data_listDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TableCol_data_list> _instance;
} _TableCol_data_list_default_instance_;
class TableColDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TableCol> _instance;
  const ::com::mdb::proto::msg::TableCol_bool_list* b_;
  const ::com::mdb::proto::msg::TableCol_uint32_list* u32_;
  const ::com::mdb::proto::msg::TableCol_sint32_list* i32_;
  const ::com::mdb::proto::msg::TableCol_uint64_list* u64_;
  const ::com::mdb::proto::msg::TableCol_sint64_list* i64_;
  const ::com::mdb::proto::msg::TableCol_float_list* f32_;
  const ::com::mdb::proto::msg::TableCol_double_list* f64_;
  const ::com::mdb::proto::msg::TableCol_string_list* str_;
  const ::com::mdb::proto::msg::TableCol_data_list* data_;
} _TableCol_default_instance_;
class StdTableDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StdTableData> _instance;
} _StdTableData_default_instance_;
class TableDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Table> _instance;
} _Table_default_instance_;
}  // namespace msg
}  // namespace proto
}  // namespace mdb
}  // namespace com
static void InitDefaultsscc_info_StdTableAttr_mdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::mdb::proto::msg::_StdTableAttr_default_instance_;
    new (ptr) ::com::mdb::proto::msg::StdTableAttr();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::mdb::proto::msg::StdTableAttr::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StdTableAttr_mdb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StdTableAttr_mdb_2eproto}, {
      &scc_info_TableField_mdb_2eproto.base,}};

static void InitDefaultsscc_info_StdTableData_mdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::mdb::proto::msg::_StdTableData_default_instance_;
    new (ptr) ::com::mdb::proto::msg::StdTableData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::mdb::proto::msg::StdTableData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StdTableData_mdb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StdTableData_mdb_2eproto}, {
      &scc_info_TableCol_mdb_2eproto.base,}};

static void InitDefaultsscc_info_Table_mdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::mdb::proto::msg::_Table_default_instance_;
    new (ptr) ::com::mdb::proto::msg::Table();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::mdb::proto::msg::Table::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Table_mdb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Table_mdb_2eproto}, {}};

static void InitDefaultsscc_info_TableCol_mdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::mdb::proto::msg::_TableCol_default_instance_;
    new (ptr) ::com::mdb::proto::msg::TableCol();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::mdb::proto::msg::TableCol::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_TableCol_mdb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 9, 0, InitDefaultsscc_info_TableCol_mdb_2eproto}, {
      &scc_info_TableCol_bool_list_mdb_2eproto.base,
      &scc_info_TableCol_uint32_list_mdb_2eproto.base,
      &scc_info_TableCol_sint32_list_mdb_2eproto.base,
      &scc_info_TableCol_uint64_list_mdb_2eproto.base,
      &scc_info_TableCol_sint64_list_mdb_2eproto.base,
      &scc_info_TableCol_float_list_mdb_2eproto.base,
      &scc_info_TableCol_double_list_mdb_2eproto.base,
      &scc_info_TableCol_string_list_mdb_2eproto.base,
      &scc_info_TableCol_data_list_mdb_2eproto.base,}};

static void InitDefaultsscc_info_TableCol_bool_list_mdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::mdb::proto::msg::_TableCol_bool_list_default_instance_;
    new (ptr) ::com::mdb::proto::msg::TableCol_bool_list();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::mdb::proto::msg::TableCol_bool_list::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TableCol_bool_list_mdb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TableCol_bool_list_mdb_2eproto}, {}};

static void InitDefaultsscc_info_TableCol_data_list_mdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::mdb::proto::msg::_TableCol_data_list_default_instance_;
    new (ptr) ::com::mdb::proto::msg::TableCol_data_list();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::mdb::proto::msg::TableCol_data_list::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TableCol_data_list_mdb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TableCol_data_list_mdb_2eproto}, {}};

static void InitDefaultsscc_info_TableCol_double_list_mdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::mdb::proto::msg::_TableCol_double_list_default_instance_;
    new (ptr) ::com::mdb::proto::msg::TableCol_double_list();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::mdb::proto::msg::TableCol_double_list::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TableCol_double_list_mdb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TableCol_double_list_mdb_2eproto}, {}};

static void InitDefaultsscc_info_TableCol_float_list_mdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::mdb::proto::msg::_TableCol_float_list_default_instance_;
    new (ptr) ::com::mdb::proto::msg::TableCol_float_list();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::mdb::proto::msg::TableCol_float_list::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TableCol_float_list_mdb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TableCol_float_list_mdb_2eproto}, {}};

static void InitDefaultsscc_info_TableCol_sint32_list_mdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::mdb::proto::msg::_TableCol_sint32_list_default_instance_;
    new (ptr) ::com::mdb::proto::msg::TableCol_sint32_list();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::mdb::proto::msg::TableCol_sint32_list::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TableCol_sint32_list_mdb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TableCol_sint32_list_mdb_2eproto}, {}};

static void InitDefaultsscc_info_TableCol_sint64_list_mdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::mdb::proto::msg::_TableCol_sint64_list_default_instance_;
    new (ptr) ::com::mdb::proto::msg::TableCol_sint64_list();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::mdb::proto::msg::TableCol_sint64_list::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TableCol_sint64_list_mdb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TableCol_sint64_list_mdb_2eproto}, {}};

static void InitDefaultsscc_info_TableCol_string_list_mdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::mdb::proto::msg::_TableCol_string_list_default_instance_;
    new (ptr) ::com::mdb::proto::msg::TableCol_string_list();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::mdb::proto::msg::TableCol_string_list::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TableCol_string_list_mdb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TableCol_string_list_mdb_2eproto}, {}};

static void InitDefaultsscc_info_TableCol_uint32_list_mdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::mdb::proto::msg::_TableCol_uint32_list_default_instance_;
    new (ptr) ::com::mdb::proto::msg::TableCol_uint32_list();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::mdb::proto::msg::TableCol_uint32_list::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TableCol_uint32_list_mdb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TableCol_uint32_list_mdb_2eproto}, {}};

static void InitDefaultsscc_info_TableCol_uint64_list_mdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::mdb::proto::msg::_TableCol_uint64_list_default_instance_;
    new (ptr) ::com::mdb::proto::msg::TableCol_uint64_list();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::mdb::proto::msg::TableCol_uint64_list::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TableCol_uint64_list_mdb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TableCol_uint64_list_mdb_2eproto}, {}};

static void InitDefaultsscc_info_TableField_mdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::mdb::proto::msg::_TableField_default_instance_;
    new (ptr) ::com::mdb::proto::msg::TableField();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::mdb::proto::msg::TableField::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TableField_mdb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TableField_mdb_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mdb_2eproto[14];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_mdb_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mdb_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mdb_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::mdb::proto::msg::TableField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::mdb::proto::msg::TableField, id_),
  PROTOBUF_FIELD_OFFSET(::com::mdb::proto::msg::TableField, type_),
  PROTOBUF_FIELD_OFFSET(::com::mdb::proto::msg::TableField, size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::mdb::proto::msg::StdTableAttr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::mdb::proto::msg::StdTableAttr, field_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::mdb::proto::msg::TableCol_bool_list, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::mdb::proto::msg::TableCol_bool_list, b_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::mdb::proto::msg::TableCol_uint32_list, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::mdb::proto::msg::TableCol_uint32_list, u32_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::mdb::proto::msg::TableCol_sint32_list, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::mdb::proto::msg::TableCol_sint32_list, i32_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::mdb::proto::msg::TableCol_uint64_list, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::mdb::proto::msg::TableCol_uint64_list, u64_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::mdb::proto::msg::TableCol_sint64_list, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::mdb::proto::msg::TableCol_sint64_list, i64_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::mdb::proto::msg::TableCol_float_list, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::mdb::proto::msg::TableCol_float_list, f32_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::mdb::proto::msg::TableCol_double_list, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::mdb::proto::msg::TableCol_double_list, f64_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::mdb::proto::msg::TableCol_string_list, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::mdb::proto::msg::TableCol_string_list, str_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::mdb::proto::msg::TableCol_data_list, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::mdb::proto::msg::TableCol_data_list, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::mdb::proto::msg::TableCol, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::com::mdb::proto::msg::TableCol, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::com::mdb::proto::msg::TableColDefaultTypeInternal, b_),
  offsetof(::com::mdb::proto::msg::TableColDefaultTypeInternal, u32_),
  offsetof(::com::mdb::proto::msg::TableColDefaultTypeInternal, i32_),
  offsetof(::com::mdb::proto::msg::TableColDefaultTypeInternal, u64_),
  offsetof(::com::mdb::proto::msg::TableColDefaultTypeInternal, i64_),
  offsetof(::com::mdb::proto::msg::TableColDefaultTypeInternal, f32_),
  offsetof(::com::mdb::proto::msg::TableColDefaultTypeInternal, f64_),
  offsetof(::com::mdb::proto::msg::TableColDefaultTypeInternal, str_),
  offsetof(::com::mdb::proto::msg::TableColDefaultTypeInternal, data_),
  PROTOBUF_FIELD_OFFSET(::com::mdb::proto::msg::TableCol, varlist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::mdb::proto::msg::StdTableData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::mdb::proto::msg::StdTableData, list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::mdb::proto::msg::Table, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::mdb::proto::msg::Table, attr_),
  PROTOBUF_FIELD_OFFSET(::com::mdb::proto::msg::Table, data_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::com::mdb::proto::msg::TableField)},
  { 8, -1, sizeof(::com::mdb::proto::msg::StdTableAttr)},
  { 14, -1, sizeof(::com::mdb::proto::msg::TableCol_bool_list)},
  { 20, -1, sizeof(::com::mdb::proto::msg::TableCol_uint32_list)},
  { 26, -1, sizeof(::com::mdb::proto::msg::TableCol_sint32_list)},
  { 32, -1, sizeof(::com::mdb::proto::msg::TableCol_uint64_list)},
  { 38, -1, sizeof(::com::mdb::proto::msg::TableCol_sint64_list)},
  { 44, -1, sizeof(::com::mdb::proto::msg::TableCol_float_list)},
  { 50, -1, sizeof(::com::mdb::proto::msg::TableCol_double_list)},
  { 56, -1, sizeof(::com::mdb::proto::msg::TableCol_string_list)},
  { 62, -1, sizeof(::com::mdb::proto::msg::TableCol_data_list)},
  { 68, -1, sizeof(::com::mdb::proto::msg::TableCol)},
  { 83, -1, sizeof(::com::mdb::proto::msg::StdTableData)},
  { 89, -1, sizeof(::com::mdb::proto::msg::Table)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::mdb::proto::msg::_TableField_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::mdb::proto::msg::_StdTableAttr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::mdb::proto::msg::_TableCol_bool_list_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::mdb::proto::msg::_TableCol_uint32_list_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::mdb::proto::msg::_TableCol_sint32_list_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::mdb::proto::msg::_TableCol_uint64_list_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::mdb::proto::msg::_TableCol_sint64_list_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::mdb::proto::msg::_TableCol_float_list_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::mdb::proto::msg::_TableCol_double_list_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::mdb::proto::msg::_TableCol_string_list_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::mdb::proto::msg::_TableCol_data_list_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::mdb::proto::msg::_TableCol_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::mdb::proto::msg::_StdTableData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::mdb::proto::msg::_Table_default_instance_),
};

const char descriptor_table_protodef_mdb_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tmdb.proto\022\021com.mdb.proto.msg\"4\n\nTableF"
  "ield\022\n\n\002id\030\001 \001(\004\022\014\n\004type\030\002 \001(\r\022\014\n\004size\030\003"
  " \001(\r\"<\n\014StdTableAttr\022,\n\005field\030\001 \003(\0132\035.co"
  "m.mdb.proto.msg.TableField\"\375\005\n\010TableCol\022"
  "2\n\001b\030\001 \001(\0132%.com.mdb.proto.msg.TableCol."
  "bool_listH\000\0226\n\003u32\030\002 \001(\0132\'.com.mdb.proto"
  ".msg.TableCol.uint32_listH\000\0226\n\003i32\030\003 \001(\013"
  "2\'.com.mdb.proto.msg.TableCol.sint32_lis"
  "tH\000\0226\n\003u64\030\004 \001(\0132\'.com.mdb.proto.msg.Tab"
  "leCol.uint64_listH\000\0226\n\003i64\030\005 \001(\0132\'.com.m"
  "db.proto.msg.TableCol.sint64_listH\000\0225\n\003f"
  "32\030\006 \001(\0132&.com.mdb.proto.msg.TableCol.fl"
  "oat_listH\000\0226\n\003f64\030\007 \001(\0132\'.com.mdb.proto."
  "msg.TableCol.double_listH\000\0226\n\003str\030\010 \001(\0132"
  "\'.com.mdb.proto.msg.TableCol.string_list"
  "H\000\0225\n\004data\030\t \001(\0132%.com.mdb.proto.msg.Tab"
  "leCol.data_listH\000\032\026\n\tbool_list\022\t\n\001b\030\001 \003("
  "\010\032\032\n\013uint32_list\022\013\n\003u32\030\001 \003(\r\032\032\n\013sint32_"
  "list\022\013\n\003i32\030\001 \003(\021\032\032\n\013uint64_list\022\013\n\003u64\030"
  "\001 \003(\004\032\032\n\013sint64_list\022\013\n\003i64\030\001 \003(\022\032\031\n\nflo"
  "at_list\022\013\n\003f32\030\001 \003(\002\032\032\n\013double_list\022\013\n\003f"
  "64\030\001 \003(\001\032\032\n\013string_list\022\013\n\003str\030\001 \003(\t\032\031\n\t"
  "data_list\022\014\n\004data\030\001 \003(\014B\t\n\007varlist\"9\n\014St"
  "dTableData\022)\n\004list\030\001 \003(\0132\033.com.mdb.proto"
  ".msg.TableCol\"#\n\005Table\022\014\n\004attr\030\001 \001(\014\022\014\n\004"
  "data\030\002 \001(\014*\343\003\n\022MSG_ID_NOTIFY_TYPE\022\026\n\022MSG"
  "_ID_NOTIFY_NULL\020\000\022\025\n\021MSG_ID_NOTIFY_MSG\020\001"
  "\022\032\n\026MSG_ID_NOTIFY_USER_ADD\020\013\022\035\n\031MSG_ID_N"
  "OTIFY_USER_REMOVE\020\014\022\035\n\031MSG_ID_NOTIFY_USE"
  "R_UPDATE\020\r\022\033\n\027MSG_ID_NOTIFY_DB_CREATE\020e\022"
  "\033\n\027MSG_ID_NOTIFY_DB_DELETE\020f\022\032\n\025MSG_ID_N"
  "OTIFY_TB_INIT\020\311\001\022\032\n\025MSG_ID_NOTIFY_TB_DRO"
  "P\020\312\001\022\032\n\025MSG_ID_NOTIFY_TB_META\020\313\001\022\032\n\025MSG_"
  "ID_NOTIFY_TB_ATTR\020\314\001\022\034\n\027MSG_ID_NOTIFY_TB"
  "_INSERT\020\315\001\022\034\n\027MSG_ID_NOTIFY_TB_APPEND\020\316\001"
  "\022\034\n\027MSG_ID_NOTIFY_TB_UPDATE\020\317\001\022\034\n\027MSG_ID"
  "_NOTIFY_TB_REMOVE\020\320\001\022\"\n\035MSG_ID_NOTIFY_TB"
  "_UPDATE_FIELD\020\321\001*\247\004\n\026MSG_ID_REQUEST_DO_T"
  "YPE\022\032\n\026MSG_ID_REQUEST_DO_NULL\020\000\022\031\n\025MSG_I"
  "D_REQUEST_DO_MSG\020\001\022\036\n\032MSG_ID_REQUEST_DO_"
  "USER_ADD\020\013\022!\n\035MSG_ID_REQUEST_DO_USER_REM"
  "OVE\020\014\022!\n\035MSG_ID_REQUEST_DO_USER_UPDATE\020\r"
  "\022\037\n\033MSG_ID_REQUEST_DO_DB_CREATE\020e\022\037\n\033MSG"
  "_ID_REQUEST_DO_DB_DELETE\020f\022\036\n\031MSG_ID_REQ"
  "UEST_DO_TB_INIT\020\311\001\022\036\n\031MSG_ID_REQUEST_DO_"
  "TB_DROP\020\312\001\022\036\n\031MSG_ID_REQUEST_DO_TB_META\020"
  "\313\001\022\036\n\031MSG_ID_REQUEST_DO_TB_ATTR\020\314\001\022 \n\033MS"
  "G_ID_REQUEST_DO_TB_INSERT\020\315\001\022 \n\033MSG_ID_R"
  "EQUEST_DO_TB_APPEND\020\316\001\022 \n\033MSG_ID_REQUEST"
  "_DO_TB_UPDATE\020\317\001\022 \n\033MSG_ID_REQUEST_DO_TB"
  "_REMOVE\020\320\001\022&\n!MSG_ID_REQUEST_DO_TB_UPDAT"
  "E_FIELD\020\321\001*\224\001\n\031MSG_ID_REQUEST_QUERY_TYPE"
  "\022\035\n\031MSG_ID_REQUEST_QUERY_NULL\020\000\022\035\n\031MSG_I"
  "D_REQUEST_QUERY_USER\020\n\022\033\n\027MSG_ID_REQUEST"
  "_QUERY_DB\020d\022\034\n\027MSG_ID_REQUEST_QUERY_TB\020\310"
  "\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mdb_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_mdb_2eproto_sccs[14] = {
  &scc_info_StdTableAttr_mdb_2eproto.base,
  &scc_info_StdTableData_mdb_2eproto.base,
  &scc_info_Table_mdb_2eproto.base,
  &scc_info_TableCol_mdb_2eproto.base,
  &scc_info_TableCol_bool_list_mdb_2eproto.base,
  &scc_info_TableCol_data_list_mdb_2eproto.base,
  &scc_info_TableCol_double_list_mdb_2eproto.base,
  &scc_info_TableCol_float_list_mdb_2eproto.base,
  &scc_info_TableCol_sint32_list_mdb_2eproto.base,
  &scc_info_TableCol_sint64_list_mdb_2eproto.base,
  &scc_info_TableCol_string_list_mdb_2eproto.base,
  &scc_info_TableCol_uint32_list_mdb_2eproto.base,
  &scc_info_TableCol_uint64_list_mdb_2eproto.base,
  &scc_info_TableField_mdb_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mdb_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mdb_2eproto = {
  false, false, descriptor_table_protodef_mdb_2eproto, "mdb.proto", 2209,
  &descriptor_table_mdb_2eproto_once, descriptor_table_mdb_2eproto_sccs, descriptor_table_mdb_2eproto_deps, 14, 0,
  schemas, file_default_instances, TableStruct_mdb_2eproto::offsets,
  file_level_metadata_mdb_2eproto, 14, file_level_enum_descriptors_mdb_2eproto, file_level_service_descriptors_mdb_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_mdb_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_mdb_2eproto)), true);
namespace com {
namespace mdb {
namespace proto {
namespace msg {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MSG_ID_NOTIFY_TYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mdb_2eproto);
  return file_level_enum_descriptors_mdb_2eproto[0];
}
bool MSG_ID_NOTIFY_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 11:
    case 12:
    case 13:
    case 101:
    case 102:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MSG_ID_REQUEST_DO_TYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mdb_2eproto);
  return file_level_enum_descriptors_mdb_2eproto[1];
}
bool MSG_ID_REQUEST_DO_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 11:
    case 12:
    case 13:
    case 101:
    case 102:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MSG_ID_REQUEST_QUERY_TYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mdb_2eproto);
  return file_level_enum_descriptors_mdb_2eproto[2];
}
bool MSG_ID_REQUEST_QUERY_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 10:
    case 100:
    case 200:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void TableField::InitAsDefaultInstance() {
}
class TableField::_Internal {
 public:
};

TableField::TableField(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.mdb.proto.msg.TableField)
}
TableField::TableField(const TableField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&id_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:com.mdb.proto.msg.TableField)
}

void TableField::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&id_)) + sizeof(size_));
}

TableField::~TableField() {
  // @@protoc_insertion_point(destructor:com.mdb.proto.msg.TableField)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TableField::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TableField::ArenaDtor(void* object) {
  TableField* _this = reinterpret_cast< TableField* >(object);
  (void)_this;
}
void TableField::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TableField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TableField& TableField::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TableField_mdb_2eproto.base);
  return *internal_default_instance();
}


void TableField::Clear() {
// @@protoc_insertion_point(message_clear_start:com.mdb.proto.msg.TableField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&id_)) + sizeof(size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableField::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TableField::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.mdb.proto.msg.TableField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // uint32 type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_type(), target);
  }

  // uint32 size = 3;
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.mdb.proto.msg.TableField)
  return target;
}

size_t TableField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.mdb.proto.msg.TableField)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  // uint32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  // uint32 size = 3;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TableField::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.mdb.proto.msg.TableField)
  GOOGLE_DCHECK_NE(&from, this);
  const TableField* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TableField>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.mdb.proto.msg.TableField)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.mdb.proto.msg.TableField)
    MergeFrom(*source);
  }
}

void TableField::MergeFrom(const TableField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.mdb.proto.msg.TableField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
}

void TableField::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.mdb.proto.msg.TableField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableField::CopyFrom(const TableField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.mdb.proto.msg.TableField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableField::IsInitialized() const {
  return true;
}

void TableField::InternalSwap(TableField* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TableField, size_)
      + sizeof(TableField::size_)
      - PROTOBUF_FIELD_OFFSET(TableField, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TableField::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StdTableAttr::InitAsDefaultInstance() {
}
class StdTableAttr::_Internal {
 public:
};

StdTableAttr::StdTableAttr(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  field_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.mdb.proto.msg.StdTableAttr)
}
StdTableAttr::StdTableAttr(const StdTableAttr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      field_(from.field_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.mdb.proto.msg.StdTableAttr)
}

void StdTableAttr::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StdTableAttr_mdb_2eproto.base);
}

StdTableAttr::~StdTableAttr() {
  // @@protoc_insertion_point(destructor:com.mdb.proto.msg.StdTableAttr)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StdTableAttr::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StdTableAttr::ArenaDtor(void* object) {
  StdTableAttr* _this = reinterpret_cast< StdTableAttr* >(object);
  (void)_this;
}
void StdTableAttr::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StdTableAttr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StdTableAttr& StdTableAttr::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StdTableAttr_mdb_2eproto.base);
  return *internal_default_instance();
}


void StdTableAttr::Clear() {
// @@protoc_insertion_point(message_clear_start:com.mdb.proto.msg.StdTableAttr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StdTableAttr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .com.mdb.proto.msg.TableField field = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_field(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StdTableAttr::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.mdb.proto.msg.StdTableAttr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.mdb.proto.msg.TableField field = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_field_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_field(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.mdb.proto.msg.StdTableAttr)
  return target;
}

size_t StdTableAttr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.mdb.proto.msg.StdTableAttr)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.mdb.proto.msg.TableField field = 1;
  total_size += 1UL * this->_internal_field_size();
  for (const auto& msg : this->field_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StdTableAttr::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.mdb.proto.msg.StdTableAttr)
  GOOGLE_DCHECK_NE(&from, this);
  const StdTableAttr* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StdTableAttr>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.mdb.proto.msg.StdTableAttr)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.mdb.proto.msg.StdTableAttr)
    MergeFrom(*source);
  }
}

void StdTableAttr::MergeFrom(const StdTableAttr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.mdb.proto.msg.StdTableAttr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  field_.MergeFrom(from.field_);
}

void StdTableAttr::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.mdb.proto.msg.StdTableAttr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StdTableAttr::CopyFrom(const StdTableAttr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.mdb.proto.msg.StdTableAttr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StdTableAttr::IsInitialized() const {
  return true;
}

void StdTableAttr::InternalSwap(StdTableAttr* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  field_.InternalSwap(&other->field_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StdTableAttr::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TableCol_bool_list::InitAsDefaultInstance() {
}
class TableCol_bool_list::_Internal {
 public:
};

TableCol_bool_list::TableCol_bool_list(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  b_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.mdb.proto.msg.TableCol.bool_list)
}
TableCol_bool_list::TableCol_bool_list(const TableCol_bool_list& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      b_(from.b_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.mdb.proto.msg.TableCol.bool_list)
}

void TableCol_bool_list::SharedCtor() {
}

TableCol_bool_list::~TableCol_bool_list() {
  // @@protoc_insertion_point(destructor:com.mdb.proto.msg.TableCol.bool_list)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TableCol_bool_list::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TableCol_bool_list::ArenaDtor(void* object) {
  TableCol_bool_list* _this = reinterpret_cast< TableCol_bool_list* >(object);
  (void)_this;
}
void TableCol_bool_list::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TableCol_bool_list::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TableCol_bool_list& TableCol_bool_list::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TableCol_bool_list_mdb_2eproto.base);
  return *internal_default_instance();
}


void TableCol_bool_list::Clear() {
// @@protoc_insertion_point(message_clear_start:com.mdb.proto.msg.TableCol.bool_list)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  b_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableCol_bool_list::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated bool b = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_b(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_b(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TableCol_bool_list::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.mdb.proto.msg.TableCol.bool_list)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bool b = 1;
  if (this->_internal_b_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_b(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.mdb.proto.msg.TableCol.bool_list)
  return target;
}

size_t TableCol_bool_list::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.mdb.proto.msg.TableCol.bool_list)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bool b = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_b_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _b_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TableCol_bool_list::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.mdb.proto.msg.TableCol.bool_list)
  GOOGLE_DCHECK_NE(&from, this);
  const TableCol_bool_list* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TableCol_bool_list>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.mdb.proto.msg.TableCol.bool_list)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.mdb.proto.msg.TableCol.bool_list)
    MergeFrom(*source);
  }
}

void TableCol_bool_list::MergeFrom(const TableCol_bool_list& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.mdb.proto.msg.TableCol.bool_list)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  b_.MergeFrom(from.b_);
}

void TableCol_bool_list::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.mdb.proto.msg.TableCol.bool_list)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableCol_bool_list::CopyFrom(const TableCol_bool_list& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.mdb.proto.msg.TableCol.bool_list)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableCol_bool_list::IsInitialized() const {
  return true;
}

void TableCol_bool_list::InternalSwap(TableCol_bool_list* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  b_.InternalSwap(&other->b_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TableCol_bool_list::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TableCol_uint32_list::InitAsDefaultInstance() {
}
class TableCol_uint32_list::_Internal {
 public:
};

TableCol_uint32_list::TableCol_uint32_list(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  u32_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.mdb.proto.msg.TableCol.uint32_list)
}
TableCol_uint32_list::TableCol_uint32_list(const TableCol_uint32_list& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      u32_(from.u32_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.mdb.proto.msg.TableCol.uint32_list)
}

void TableCol_uint32_list::SharedCtor() {
}

TableCol_uint32_list::~TableCol_uint32_list() {
  // @@protoc_insertion_point(destructor:com.mdb.proto.msg.TableCol.uint32_list)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TableCol_uint32_list::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TableCol_uint32_list::ArenaDtor(void* object) {
  TableCol_uint32_list* _this = reinterpret_cast< TableCol_uint32_list* >(object);
  (void)_this;
}
void TableCol_uint32_list::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TableCol_uint32_list::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TableCol_uint32_list& TableCol_uint32_list::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TableCol_uint32_list_mdb_2eproto.base);
  return *internal_default_instance();
}


void TableCol_uint32_list::Clear() {
// @@protoc_insertion_point(message_clear_start:com.mdb.proto.msg.TableCol.uint32_list)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  u32_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableCol_uint32_list::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 u32 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_u32(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_u32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TableCol_uint32_list::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.mdb.proto.msg.TableCol.uint32_list)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 u32 = 1;
  {
    int byte_size = _u32_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_u32(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.mdb.proto.msg.TableCol.uint32_list)
  return target;
}

size_t TableCol_uint32_list::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.mdb.proto.msg.TableCol.uint32_list)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 u32 = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->u32_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _u32_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TableCol_uint32_list::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.mdb.proto.msg.TableCol.uint32_list)
  GOOGLE_DCHECK_NE(&from, this);
  const TableCol_uint32_list* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TableCol_uint32_list>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.mdb.proto.msg.TableCol.uint32_list)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.mdb.proto.msg.TableCol.uint32_list)
    MergeFrom(*source);
  }
}

void TableCol_uint32_list::MergeFrom(const TableCol_uint32_list& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.mdb.proto.msg.TableCol.uint32_list)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  u32_.MergeFrom(from.u32_);
}

void TableCol_uint32_list::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.mdb.proto.msg.TableCol.uint32_list)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableCol_uint32_list::CopyFrom(const TableCol_uint32_list& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.mdb.proto.msg.TableCol.uint32_list)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableCol_uint32_list::IsInitialized() const {
  return true;
}

void TableCol_uint32_list::InternalSwap(TableCol_uint32_list* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  u32_.InternalSwap(&other->u32_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TableCol_uint32_list::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TableCol_sint32_list::InitAsDefaultInstance() {
}
class TableCol_sint32_list::_Internal {
 public:
};

TableCol_sint32_list::TableCol_sint32_list(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  i32_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.mdb.proto.msg.TableCol.sint32_list)
}
TableCol_sint32_list::TableCol_sint32_list(const TableCol_sint32_list& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      i32_(from.i32_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.mdb.proto.msg.TableCol.sint32_list)
}

void TableCol_sint32_list::SharedCtor() {
}

TableCol_sint32_list::~TableCol_sint32_list() {
  // @@protoc_insertion_point(destructor:com.mdb.proto.msg.TableCol.sint32_list)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TableCol_sint32_list::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TableCol_sint32_list::ArenaDtor(void* object) {
  TableCol_sint32_list* _this = reinterpret_cast< TableCol_sint32_list* >(object);
  (void)_this;
}
void TableCol_sint32_list::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TableCol_sint32_list::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TableCol_sint32_list& TableCol_sint32_list::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TableCol_sint32_list_mdb_2eproto.base);
  return *internal_default_instance();
}


void TableCol_sint32_list::Clear() {
// @@protoc_insertion_point(message_clear_start:com.mdb.proto.msg.TableCol.sint32_list)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  i32_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableCol_sint32_list::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated sint32 i32 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt32Parser(_internal_mutable_i32(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_i32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TableCol_sint32_list::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.mdb.proto.msg.TableCol.sint32_list)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated sint32 i32 = 1;
  {
    int byte_size = _i32_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteSInt32Packed(
          1, _internal_i32(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.mdb.proto.msg.TableCol.sint32_list)
  return target;
}

size_t TableCol_sint32_list::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.mdb.proto.msg.TableCol.sint32_list)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated sint32 i32 = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      SInt32Size(this->i32_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _i32_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TableCol_sint32_list::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.mdb.proto.msg.TableCol.sint32_list)
  GOOGLE_DCHECK_NE(&from, this);
  const TableCol_sint32_list* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TableCol_sint32_list>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.mdb.proto.msg.TableCol.sint32_list)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.mdb.proto.msg.TableCol.sint32_list)
    MergeFrom(*source);
  }
}

void TableCol_sint32_list::MergeFrom(const TableCol_sint32_list& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.mdb.proto.msg.TableCol.sint32_list)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  i32_.MergeFrom(from.i32_);
}

void TableCol_sint32_list::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.mdb.proto.msg.TableCol.sint32_list)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableCol_sint32_list::CopyFrom(const TableCol_sint32_list& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.mdb.proto.msg.TableCol.sint32_list)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableCol_sint32_list::IsInitialized() const {
  return true;
}

void TableCol_sint32_list::InternalSwap(TableCol_sint32_list* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  i32_.InternalSwap(&other->i32_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TableCol_sint32_list::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TableCol_uint64_list::InitAsDefaultInstance() {
}
class TableCol_uint64_list::_Internal {
 public:
};

TableCol_uint64_list::TableCol_uint64_list(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  u64_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.mdb.proto.msg.TableCol.uint64_list)
}
TableCol_uint64_list::TableCol_uint64_list(const TableCol_uint64_list& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      u64_(from.u64_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.mdb.proto.msg.TableCol.uint64_list)
}

void TableCol_uint64_list::SharedCtor() {
}

TableCol_uint64_list::~TableCol_uint64_list() {
  // @@protoc_insertion_point(destructor:com.mdb.proto.msg.TableCol.uint64_list)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TableCol_uint64_list::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TableCol_uint64_list::ArenaDtor(void* object) {
  TableCol_uint64_list* _this = reinterpret_cast< TableCol_uint64_list* >(object);
  (void)_this;
}
void TableCol_uint64_list::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TableCol_uint64_list::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TableCol_uint64_list& TableCol_uint64_list::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TableCol_uint64_list_mdb_2eproto.base);
  return *internal_default_instance();
}


void TableCol_uint64_list::Clear() {
// @@protoc_insertion_point(message_clear_start:com.mdb.proto.msg.TableCol.uint64_list)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  u64_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableCol_uint64_list::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint64 u64 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_u64(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_u64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TableCol_uint64_list::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.mdb.proto.msg.TableCol.uint64_list)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 u64 = 1;
  {
    int byte_size = _u64_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          1, _internal_u64(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.mdb.proto.msg.TableCol.uint64_list)
  return target;
}

size_t TableCol_uint64_list::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.mdb.proto.msg.TableCol.uint64_list)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 u64 = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->u64_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _u64_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TableCol_uint64_list::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.mdb.proto.msg.TableCol.uint64_list)
  GOOGLE_DCHECK_NE(&from, this);
  const TableCol_uint64_list* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TableCol_uint64_list>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.mdb.proto.msg.TableCol.uint64_list)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.mdb.proto.msg.TableCol.uint64_list)
    MergeFrom(*source);
  }
}

void TableCol_uint64_list::MergeFrom(const TableCol_uint64_list& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.mdb.proto.msg.TableCol.uint64_list)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  u64_.MergeFrom(from.u64_);
}

void TableCol_uint64_list::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.mdb.proto.msg.TableCol.uint64_list)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableCol_uint64_list::CopyFrom(const TableCol_uint64_list& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.mdb.proto.msg.TableCol.uint64_list)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableCol_uint64_list::IsInitialized() const {
  return true;
}

void TableCol_uint64_list::InternalSwap(TableCol_uint64_list* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  u64_.InternalSwap(&other->u64_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TableCol_uint64_list::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TableCol_sint64_list::InitAsDefaultInstance() {
}
class TableCol_sint64_list::_Internal {
 public:
};

TableCol_sint64_list::TableCol_sint64_list(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  i64_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.mdb.proto.msg.TableCol.sint64_list)
}
TableCol_sint64_list::TableCol_sint64_list(const TableCol_sint64_list& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      i64_(from.i64_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.mdb.proto.msg.TableCol.sint64_list)
}

void TableCol_sint64_list::SharedCtor() {
}

TableCol_sint64_list::~TableCol_sint64_list() {
  // @@protoc_insertion_point(destructor:com.mdb.proto.msg.TableCol.sint64_list)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TableCol_sint64_list::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TableCol_sint64_list::ArenaDtor(void* object) {
  TableCol_sint64_list* _this = reinterpret_cast< TableCol_sint64_list* >(object);
  (void)_this;
}
void TableCol_sint64_list::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TableCol_sint64_list::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TableCol_sint64_list& TableCol_sint64_list::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TableCol_sint64_list_mdb_2eproto.base);
  return *internal_default_instance();
}


void TableCol_sint64_list::Clear() {
// @@protoc_insertion_point(message_clear_start:com.mdb.proto.msg.TableCol.sint64_list)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  i64_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableCol_sint64_list::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated sint64 i64 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt64Parser(_internal_mutable_i64(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_i64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TableCol_sint64_list::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.mdb.proto.msg.TableCol.sint64_list)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated sint64 i64 = 1;
  {
    int byte_size = _i64_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteSInt64Packed(
          1, _internal_i64(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.mdb.proto.msg.TableCol.sint64_list)
  return target;
}

size_t TableCol_sint64_list::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.mdb.proto.msg.TableCol.sint64_list)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated sint64 i64 = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      SInt64Size(this->i64_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _i64_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TableCol_sint64_list::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.mdb.proto.msg.TableCol.sint64_list)
  GOOGLE_DCHECK_NE(&from, this);
  const TableCol_sint64_list* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TableCol_sint64_list>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.mdb.proto.msg.TableCol.sint64_list)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.mdb.proto.msg.TableCol.sint64_list)
    MergeFrom(*source);
  }
}

void TableCol_sint64_list::MergeFrom(const TableCol_sint64_list& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.mdb.proto.msg.TableCol.sint64_list)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  i64_.MergeFrom(from.i64_);
}

void TableCol_sint64_list::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.mdb.proto.msg.TableCol.sint64_list)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableCol_sint64_list::CopyFrom(const TableCol_sint64_list& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.mdb.proto.msg.TableCol.sint64_list)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableCol_sint64_list::IsInitialized() const {
  return true;
}

void TableCol_sint64_list::InternalSwap(TableCol_sint64_list* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  i64_.InternalSwap(&other->i64_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TableCol_sint64_list::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TableCol_float_list::InitAsDefaultInstance() {
}
class TableCol_float_list::_Internal {
 public:
};

TableCol_float_list::TableCol_float_list(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  f32_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.mdb.proto.msg.TableCol.float_list)
}
TableCol_float_list::TableCol_float_list(const TableCol_float_list& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      f32_(from.f32_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.mdb.proto.msg.TableCol.float_list)
}

void TableCol_float_list::SharedCtor() {
}

TableCol_float_list::~TableCol_float_list() {
  // @@protoc_insertion_point(destructor:com.mdb.proto.msg.TableCol.float_list)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TableCol_float_list::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TableCol_float_list::ArenaDtor(void* object) {
  TableCol_float_list* _this = reinterpret_cast< TableCol_float_list* >(object);
  (void)_this;
}
void TableCol_float_list::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TableCol_float_list::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TableCol_float_list& TableCol_float_list::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TableCol_float_list_mdb_2eproto.base);
  return *internal_default_instance();
}


void TableCol_float_list::Clear() {
// @@protoc_insertion_point(message_clear_start:com.mdb.proto.msg.TableCol.float_list)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  f32_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableCol_float_list::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float f32 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_f32(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_f32(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TableCol_float_list::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.mdb.proto.msg.TableCol.float_list)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float f32 = 1;
  if (this->_internal_f32_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_f32(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.mdb.proto.msg.TableCol.float_list)
  return target;
}

size_t TableCol_float_list::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.mdb.proto.msg.TableCol.float_list)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float f32 = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_f32_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _f32_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TableCol_float_list::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.mdb.proto.msg.TableCol.float_list)
  GOOGLE_DCHECK_NE(&from, this);
  const TableCol_float_list* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TableCol_float_list>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.mdb.proto.msg.TableCol.float_list)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.mdb.proto.msg.TableCol.float_list)
    MergeFrom(*source);
  }
}

void TableCol_float_list::MergeFrom(const TableCol_float_list& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.mdb.proto.msg.TableCol.float_list)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  f32_.MergeFrom(from.f32_);
}

void TableCol_float_list::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.mdb.proto.msg.TableCol.float_list)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableCol_float_list::CopyFrom(const TableCol_float_list& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.mdb.proto.msg.TableCol.float_list)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableCol_float_list::IsInitialized() const {
  return true;
}

void TableCol_float_list::InternalSwap(TableCol_float_list* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  f32_.InternalSwap(&other->f32_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TableCol_float_list::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TableCol_double_list::InitAsDefaultInstance() {
}
class TableCol_double_list::_Internal {
 public:
};

TableCol_double_list::TableCol_double_list(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  f64_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.mdb.proto.msg.TableCol.double_list)
}
TableCol_double_list::TableCol_double_list(const TableCol_double_list& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      f64_(from.f64_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.mdb.proto.msg.TableCol.double_list)
}

void TableCol_double_list::SharedCtor() {
}

TableCol_double_list::~TableCol_double_list() {
  // @@protoc_insertion_point(destructor:com.mdb.proto.msg.TableCol.double_list)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TableCol_double_list::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TableCol_double_list::ArenaDtor(void* object) {
  TableCol_double_list* _this = reinterpret_cast< TableCol_double_list* >(object);
  (void)_this;
}
void TableCol_double_list::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TableCol_double_list::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TableCol_double_list& TableCol_double_list::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TableCol_double_list_mdb_2eproto.base);
  return *internal_default_instance();
}


void TableCol_double_list::Clear() {
// @@protoc_insertion_point(message_clear_start:com.mdb.proto.msg.TableCol.double_list)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  f64_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableCol_double_list::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated double f64 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_f64(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9) {
          _internal_add_f64(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TableCol_double_list::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.mdb.proto.msg.TableCol.double_list)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double f64 = 1;
  if (this->_internal_f64_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_f64(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.mdb.proto.msg.TableCol.double_list)
  return target;
}

size_t TableCol_double_list::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.mdb.proto.msg.TableCol.double_list)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double f64 = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_f64_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _f64_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TableCol_double_list::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.mdb.proto.msg.TableCol.double_list)
  GOOGLE_DCHECK_NE(&from, this);
  const TableCol_double_list* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TableCol_double_list>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.mdb.proto.msg.TableCol.double_list)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.mdb.proto.msg.TableCol.double_list)
    MergeFrom(*source);
  }
}

void TableCol_double_list::MergeFrom(const TableCol_double_list& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.mdb.proto.msg.TableCol.double_list)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  f64_.MergeFrom(from.f64_);
}

void TableCol_double_list::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.mdb.proto.msg.TableCol.double_list)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableCol_double_list::CopyFrom(const TableCol_double_list& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.mdb.proto.msg.TableCol.double_list)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableCol_double_list::IsInitialized() const {
  return true;
}

void TableCol_double_list::InternalSwap(TableCol_double_list* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  f64_.InternalSwap(&other->f64_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TableCol_double_list::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TableCol_string_list::InitAsDefaultInstance() {
}
class TableCol_string_list::_Internal {
 public:
};

TableCol_string_list::TableCol_string_list(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  str_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.mdb.proto.msg.TableCol.string_list)
}
TableCol_string_list::TableCol_string_list(const TableCol_string_list& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      str_(from.str_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.mdb.proto.msg.TableCol.string_list)
}

void TableCol_string_list::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TableCol_string_list_mdb_2eproto.base);
}

TableCol_string_list::~TableCol_string_list() {
  // @@protoc_insertion_point(destructor:com.mdb.proto.msg.TableCol.string_list)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TableCol_string_list::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TableCol_string_list::ArenaDtor(void* object) {
  TableCol_string_list* _this = reinterpret_cast< TableCol_string_list* >(object);
  (void)_this;
}
void TableCol_string_list::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TableCol_string_list::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TableCol_string_list& TableCol_string_list::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TableCol_string_list_mdb_2eproto.base);
  return *internal_default_instance();
}


void TableCol_string_list::Clear() {
// @@protoc_insertion_point(message_clear_start:com.mdb.proto.msg.TableCol.string_list)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  str_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableCol_string_list::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string str = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_str();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.mdb.proto.msg.TableCol.string_list.str"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TableCol_string_list::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.mdb.proto.msg.TableCol.string_list)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string str = 1;
  for (int i = 0, n = this->_internal_str_size(); i < n; i++) {
    const auto& s = this->_internal_str(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.mdb.proto.msg.TableCol.string_list.str");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.mdb.proto.msg.TableCol.string_list)
  return target;
}

size_t TableCol_string_list::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.mdb.proto.msg.TableCol.string_list)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string str = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(str_.size());
  for (int i = 0, n = str_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      str_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TableCol_string_list::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.mdb.proto.msg.TableCol.string_list)
  GOOGLE_DCHECK_NE(&from, this);
  const TableCol_string_list* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TableCol_string_list>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.mdb.proto.msg.TableCol.string_list)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.mdb.proto.msg.TableCol.string_list)
    MergeFrom(*source);
  }
}

void TableCol_string_list::MergeFrom(const TableCol_string_list& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.mdb.proto.msg.TableCol.string_list)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  str_.MergeFrom(from.str_);
}

void TableCol_string_list::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.mdb.proto.msg.TableCol.string_list)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableCol_string_list::CopyFrom(const TableCol_string_list& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.mdb.proto.msg.TableCol.string_list)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableCol_string_list::IsInitialized() const {
  return true;
}

void TableCol_string_list::InternalSwap(TableCol_string_list* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  str_.InternalSwap(&other->str_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TableCol_string_list::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TableCol_data_list::InitAsDefaultInstance() {
}
class TableCol_data_list::_Internal {
 public:
};

TableCol_data_list::TableCol_data_list(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.mdb.proto.msg.TableCol.data_list)
}
TableCol_data_list::TableCol_data_list(const TableCol_data_list& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.mdb.proto.msg.TableCol.data_list)
}

void TableCol_data_list::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TableCol_data_list_mdb_2eproto.base);
}

TableCol_data_list::~TableCol_data_list() {
  // @@protoc_insertion_point(destructor:com.mdb.proto.msg.TableCol.data_list)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TableCol_data_list::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TableCol_data_list::ArenaDtor(void* object) {
  TableCol_data_list* _this = reinterpret_cast< TableCol_data_list* >(object);
  (void)_this;
}
void TableCol_data_list::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TableCol_data_list::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TableCol_data_list& TableCol_data_list::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TableCol_data_list_mdb_2eproto.base);
  return *internal_default_instance();
}


void TableCol_data_list::Clear() {
// @@protoc_insertion_point(message_clear_start:com.mdb.proto.msg.TableCol.data_list)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableCol_data_list::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_data();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TableCol_data_list::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.mdb.proto.msg.TableCol.data_list)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes data = 1;
  for (int i = 0, n = this->_internal_data_size(); i < n; i++) {
    const auto& s = this->_internal_data(i);
    target = stream->WriteBytes(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.mdb.proto.msg.TableCol.data_list)
  return target;
}

size_t TableCol_data_list::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.mdb.proto.msg.TableCol.data_list)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes data = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(data_.size());
  for (int i = 0, n = data_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      data_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TableCol_data_list::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.mdb.proto.msg.TableCol.data_list)
  GOOGLE_DCHECK_NE(&from, this);
  const TableCol_data_list* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TableCol_data_list>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.mdb.proto.msg.TableCol.data_list)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.mdb.proto.msg.TableCol.data_list)
    MergeFrom(*source);
  }
}

void TableCol_data_list::MergeFrom(const TableCol_data_list& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.mdb.proto.msg.TableCol.data_list)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void TableCol_data_list::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.mdb.proto.msg.TableCol.data_list)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableCol_data_list::CopyFrom(const TableCol_data_list& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.mdb.proto.msg.TableCol.data_list)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableCol_data_list::IsInitialized() const {
  return true;
}

void TableCol_data_list::InternalSwap(TableCol_data_list* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TableCol_data_list::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TableCol::InitAsDefaultInstance() {
  ::com::mdb::proto::msg::_TableCol_default_instance_.b_ = const_cast< ::com::mdb::proto::msg::TableCol_bool_list*>(
      ::com::mdb::proto::msg::TableCol_bool_list::internal_default_instance());
  ::com::mdb::proto::msg::_TableCol_default_instance_.u32_ = const_cast< ::com::mdb::proto::msg::TableCol_uint32_list*>(
      ::com::mdb::proto::msg::TableCol_uint32_list::internal_default_instance());
  ::com::mdb::proto::msg::_TableCol_default_instance_.i32_ = const_cast< ::com::mdb::proto::msg::TableCol_sint32_list*>(
      ::com::mdb::proto::msg::TableCol_sint32_list::internal_default_instance());
  ::com::mdb::proto::msg::_TableCol_default_instance_.u64_ = const_cast< ::com::mdb::proto::msg::TableCol_uint64_list*>(
      ::com::mdb::proto::msg::TableCol_uint64_list::internal_default_instance());
  ::com::mdb::proto::msg::_TableCol_default_instance_.i64_ = const_cast< ::com::mdb::proto::msg::TableCol_sint64_list*>(
      ::com::mdb::proto::msg::TableCol_sint64_list::internal_default_instance());
  ::com::mdb::proto::msg::_TableCol_default_instance_.f32_ = const_cast< ::com::mdb::proto::msg::TableCol_float_list*>(
      ::com::mdb::proto::msg::TableCol_float_list::internal_default_instance());
  ::com::mdb::proto::msg::_TableCol_default_instance_.f64_ = const_cast< ::com::mdb::proto::msg::TableCol_double_list*>(
      ::com::mdb::proto::msg::TableCol_double_list::internal_default_instance());
  ::com::mdb::proto::msg::_TableCol_default_instance_.str_ = const_cast< ::com::mdb::proto::msg::TableCol_string_list*>(
      ::com::mdb::proto::msg::TableCol_string_list::internal_default_instance());
  ::com::mdb::proto::msg::_TableCol_default_instance_.data_ = const_cast< ::com::mdb::proto::msg::TableCol_data_list*>(
      ::com::mdb::proto::msg::TableCol_data_list::internal_default_instance());
}
class TableCol::_Internal {
 public:
  static const ::com::mdb::proto::msg::TableCol_bool_list& b(const TableCol* msg);
  static const ::com::mdb::proto::msg::TableCol_uint32_list& u32(const TableCol* msg);
  static const ::com::mdb::proto::msg::TableCol_sint32_list& i32(const TableCol* msg);
  static const ::com::mdb::proto::msg::TableCol_uint64_list& u64(const TableCol* msg);
  static const ::com::mdb::proto::msg::TableCol_sint64_list& i64(const TableCol* msg);
  static const ::com::mdb::proto::msg::TableCol_float_list& f32(const TableCol* msg);
  static const ::com::mdb::proto::msg::TableCol_double_list& f64(const TableCol* msg);
  static const ::com::mdb::proto::msg::TableCol_string_list& str(const TableCol* msg);
  static const ::com::mdb::proto::msg::TableCol_data_list& data(const TableCol* msg);
};

const ::com::mdb::proto::msg::TableCol_bool_list&
TableCol::_Internal::b(const TableCol* msg) {
  return *msg->varlist_.b_;
}
const ::com::mdb::proto::msg::TableCol_uint32_list&
TableCol::_Internal::u32(const TableCol* msg) {
  return *msg->varlist_.u32_;
}
const ::com::mdb::proto::msg::TableCol_sint32_list&
TableCol::_Internal::i32(const TableCol* msg) {
  return *msg->varlist_.i32_;
}
const ::com::mdb::proto::msg::TableCol_uint64_list&
TableCol::_Internal::u64(const TableCol* msg) {
  return *msg->varlist_.u64_;
}
const ::com::mdb::proto::msg::TableCol_sint64_list&
TableCol::_Internal::i64(const TableCol* msg) {
  return *msg->varlist_.i64_;
}
const ::com::mdb::proto::msg::TableCol_float_list&
TableCol::_Internal::f32(const TableCol* msg) {
  return *msg->varlist_.f32_;
}
const ::com::mdb::proto::msg::TableCol_double_list&
TableCol::_Internal::f64(const TableCol* msg) {
  return *msg->varlist_.f64_;
}
const ::com::mdb::proto::msg::TableCol_string_list&
TableCol::_Internal::str(const TableCol* msg) {
  return *msg->varlist_.str_;
}
const ::com::mdb::proto::msg::TableCol_data_list&
TableCol::_Internal::data(const TableCol* msg) {
  return *msg->varlist_.data_;
}
void TableCol::set_allocated_b(::com::mdb::proto::msg::TableCol_bool_list* b) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_varlist();
  if (b) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(b);
    if (message_arena != submessage_arena) {
      b = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, b, submessage_arena);
    }
    set_has_b();
    varlist_.b_ = b;
  }
  // @@protoc_insertion_point(field_set_allocated:com.mdb.proto.msg.TableCol.b)
}
void TableCol::set_allocated_u32(::com::mdb::proto::msg::TableCol_uint32_list* u32) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_varlist();
  if (u32) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(u32);
    if (message_arena != submessage_arena) {
      u32 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, u32, submessage_arena);
    }
    set_has_u32();
    varlist_.u32_ = u32;
  }
  // @@protoc_insertion_point(field_set_allocated:com.mdb.proto.msg.TableCol.u32)
}
void TableCol::set_allocated_i32(::com::mdb::proto::msg::TableCol_sint32_list* i32) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_varlist();
  if (i32) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(i32);
    if (message_arena != submessage_arena) {
      i32 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, i32, submessage_arena);
    }
    set_has_i32();
    varlist_.i32_ = i32;
  }
  // @@protoc_insertion_point(field_set_allocated:com.mdb.proto.msg.TableCol.i32)
}
void TableCol::set_allocated_u64(::com::mdb::proto::msg::TableCol_uint64_list* u64) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_varlist();
  if (u64) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(u64);
    if (message_arena != submessage_arena) {
      u64 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, u64, submessage_arena);
    }
    set_has_u64();
    varlist_.u64_ = u64;
  }
  // @@protoc_insertion_point(field_set_allocated:com.mdb.proto.msg.TableCol.u64)
}
void TableCol::set_allocated_i64(::com::mdb::proto::msg::TableCol_sint64_list* i64) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_varlist();
  if (i64) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(i64);
    if (message_arena != submessage_arena) {
      i64 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, i64, submessage_arena);
    }
    set_has_i64();
    varlist_.i64_ = i64;
  }
  // @@protoc_insertion_point(field_set_allocated:com.mdb.proto.msg.TableCol.i64)
}
void TableCol::set_allocated_f32(::com::mdb::proto::msg::TableCol_float_list* f32) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_varlist();
  if (f32) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f32);
    if (message_arena != submessage_arena) {
      f32 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f32, submessage_arena);
    }
    set_has_f32();
    varlist_.f32_ = f32;
  }
  // @@protoc_insertion_point(field_set_allocated:com.mdb.proto.msg.TableCol.f32)
}
void TableCol::set_allocated_f64(::com::mdb::proto::msg::TableCol_double_list* f64) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_varlist();
  if (f64) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f64);
    if (message_arena != submessage_arena) {
      f64 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f64, submessage_arena);
    }
    set_has_f64();
    varlist_.f64_ = f64;
  }
  // @@protoc_insertion_point(field_set_allocated:com.mdb.proto.msg.TableCol.f64)
}
void TableCol::set_allocated_str(::com::mdb::proto::msg::TableCol_string_list* str) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_varlist();
  if (str) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(str);
    if (message_arena != submessage_arena) {
      str = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, str, submessage_arena);
    }
    set_has_str();
    varlist_.str_ = str;
  }
  // @@protoc_insertion_point(field_set_allocated:com.mdb.proto.msg.TableCol.str)
}
void TableCol::set_allocated_data(::com::mdb::proto::msg::TableCol_data_list* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_varlist();
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    set_has_data();
    varlist_.data_ = data;
  }
  // @@protoc_insertion_point(field_set_allocated:com.mdb.proto.msg.TableCol.data)
}
TableCol::TableCol(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.mdb.proto.msg.TableCol)
}
TableCol::TableCol(const TableCol& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_varlist();
  switch (from.varlist_case()) {
    case kB: {
      _internal_mutable_b()->::com::mdb::proto::msg::TableCol_bool_list::MergeFrom(from._internal_b());
      break;
    }
    case kU32: {
      _internal_mutable_u32()->::com::mdb::proto::msg::TableCol_uint32_list::MergeFrom(from._internal_u32());
      break;
    }
    case kI32: {
      _internal_mutable_i32()->::com::mdb::proto::msg::TableCol_sint32_list::MergeFrom(from._internal_i32());
      break;
    }
    case kU64: {
      _internal_mutable_u64()->::com::mdb::proto::msg::TableCol_uint64_list::MergeFrom(from._internal_u64());
      break;
    }
    case kI64: {
      _internal_mutable_i64()->::com::mdb::proto::msg::TableCol_sint64_list::MergeFrom(from._internal_i64());
      break;
    }
    case kF32: {
      _internal_mutable_f32()->::com::mdb::proto::msg::TableCol_float_list::MergeFrom(from._internal_f32());
      break;
    }
    case kF64: {
      _internal_mutable_f64()->::com::mdb::proto::msg::TableCol_double_list::MergeFrom(from._internal_f64());
      break;
    }
    case kStr: {
      _internal_mutable_str()->::com::mdb::proto::msg::TableCol_string_list::MergeFrom(from._internal_str());
      break;
    }
    case kData: {
      _internal_mutable_data()->::com::mdb::proto::msg::TableCol_data_list::MergeFrom(from._internal_data());
      break;
    }
    case VARLIST_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:com.mdb.proto.msg.TableCol)
}

void TableCol::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TableCol_mdb_2eproto.base);
  clear_has_varlist();
}

TableCol::~TableCol() {
  // @@protoc_insertion_point(destructor:com.mdb.proto.msg.TableCol)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TableCol::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_varlist()) {
    clear_varlist();
  }
}

void TableCol::ArenaDtor(void* object) {
  TableCol* _this = reinterpret_cast< TableCol* >(object);
  (void)_this;
}
void TableCol::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TableCol::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TableCol& TableCol::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TableCol_mdb_2eproto.base);
  return *internal_default_instance();
}


void TableCol::clear_varlist() {
// @@protoc_insertion_point(one_of_clear_start:com.mdb.proto.msg.TableCol)
  switch (varlist_case()) {
    case kB: {
      if (GetArena() == nullptr) {
        delete varlist_.b_;
      }
      break;
    }
    case kU32: {
      if (GetArena() == nullptr) {
        delete varlist_.u32_;
      }
      break;
    }
    case kI32: {
      if (GetArena() == nullptr) {
        delete varlist_.i32_;
      }
      break;
    }
    case kU64: {
      if (GetArena() == nullptr) {
        delete varlist_.u64_;
      }
      break;
    }
    case kI64: {
      if (GetArena() == nullptr) {
        delete varlist_.i64_;
      }
      break;
    }
    case kF32: {
      if (GetArena() == nullptr) {
        delete varlist_.f32_;
      }
      break;
    }
    case kF64: {
      if (GetArena() == nullptr) {
        delete varlist_.f64_;
      }
      break;
    }
    case kStr: {
      if (GetArena() == nullptr) {
        delete varlist_.str_;
      }
      break;
    }
    case kData: {
      if (GetArena() == nullptr) {
        delete varlist_.data_;
      }
      break;
    }
    case VARLIST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VARLIST_NOT_SET;
}


void TableCol::Clear() {
// @@protoc_insertion_point(message_clear_start:com.mdb.proto.msg.TableCol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_varlist();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableCol::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .com.mdb.proto.msg.TableCol.bool_list b = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_b(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.mdb.proto.msg.TableCol.uint32_list u32 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_u32(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.mdb.proto.msg.TableCol.sint32_list i32 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_i32(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.mdb.proto.msg.TableCol.uint64_list u64 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_u64(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.mdb.proto.msg.TableCol.sint64_list i64 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_i64(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.mdb.proto.msg.TableCol.float_list f32 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_f32(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.mdb.proto.msg.TableCol.double_list f64 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_f64(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.mdb.proto.msg.TableCol.string_list str = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_str(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.mdb.proto.msg.TableCol.data_list data = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TableCol::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.mdb.proto.msg.TableCol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.mdb.proto.msg.TableCol.bool_list b = 1;
  if (_internal_has_b()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::b(this), target, stream);
  }

  // .com.mdb.proto.msg.TableCol.uint32_list u32 = 2;
  if (_internal_has_u32()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::u32(this), target, stream);
  }

  // .com.mdb.proto.msg.TableCol.sint32_list i32 = 3;
  if (_internal_has_i32()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::i32(this), target, stream);
  }

  // .com.mdb.proto.msg.TableCol.uint64_list u64 = 4;
  if (_internal_has_u64()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::u64(this), target, stream);
  }

  // .com.mdb.proto.msg.TableCol.sint64_list i64 = 5;
  if (_internal_has_i64()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::i64(this), target, stream);
  }

  // .com.mdb.proto.msg.TableCol.float_list f32 = 6;
  if (_internal_has_f32()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::f32(this), target, stream);
  }

  // .com.mdb.proto.msg.TableCol.double_list f64 = 7;
  if (_internal_has_f64()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::f64(this), target, stream);
  }

  // .com.mdb.proto.msg.TableCol.string_list str = 8;
  if (_internal_has_str()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::str(this), target, stream);
  }

  // .com.mdb.proto.msg.TableCol.data_list data = 9;
  if (_internal_has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.mdb.proto.msg.TableCol)
  return target;
}

size_t TableCol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.mdb.proto.msg.TableCol)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (varlist_case()) {
    // .com.mdb.proto.msg.TableCol.bool_list b = 1;
    case kB: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *varlist_.b_);
      break;
    }
    // .com.mdb.proto.msg.TableCol.uint32_list u32 = 2;
    case kU32: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *varlist_.u32_);
      break;
    }
    // .com.mdb.proto.msg.TableCol.sint32_list i32 = 3;
    case kI32: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *varlist_.i32_);
      break;
    }
    // .com.mdb.proto.msg.TableCol.uint64_list u64 = 4;
    case kU64: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *varlist_.u64_);
      break;
    }
    // .com.mdb.proto.msg.TableCol.sint64_list i64 = 5;
    case kI64: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *varlist_.i64_);
      break;
    }
    // .com.mdb.proto.msg.TableCol.float_list f32 = 6;
    case kF32: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *varlist_.f32_);
      break;
    }
    // .com.mdb.proto.msg.TableCol.double_list f64 = 7;
    case kF64: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *varlist_.f64_);
      break;
    }
    // .com.mdb.proto.msg.TableCol.string_list str = 8;
    case kStr: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *varlist_.str_);
      break;
    }
    // .com.mdb.proto.msg.TableCol.data_list data = 9;
    case kData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *varlist_.data_);
      break;
    }
    case VARLIST_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TableCol::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.mdb.proto.msg.TableCol)
  GOOGLE_DCHECK_NE(&from, this);
  const TableCol* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TableCol>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.mdb.proto.msg.TableCol)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.mdb.proto.msg.TableCol)
    MergeFrom(*source);
  }
}

void TableCol::MergeFrom(const TableCol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.mdb.proto.msg.TableCol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.varlist_case()) {
    case kB: {
      _internal_mutable_b()->::com::mdb::proto::msg::TableCol_bool_list::MergeFrom(from._internal_b());
      break;
    }
    case kU32: {
      _internal_mutable_u32()->::com::mdb::proto::msg::TableCol_uint32_list::MergeFrom(from._internal_u32());
      break;
    }
    case kI32: {
      _internal_mutable_i32()->::com::mdb::proto::msg::TableCol_sint32_list::MergeFrom(from._internal_i32());
      break;
    }
    case kU64: {
      _internal_mutable_u64()->::com::mdb::proto::msg::TableCol_uint64_list::MergeFrom(from._internal_u64());
      break;
    }
    case kI64: {
      _internal_mutable_i64()->::com::mdb::proto::msg::TableCol_sint64_list::MergeFrom(from._internal_i64());
      break;
    }
    case kF32: {
      _internal_mutable_f32()->::com::mdb::proto::msg::TableCol_float_list::MergeFrom(from._internal_f32());
      break;
    }
    case kF64: {
      _internal_mutable_f64()->::com::mdb::proto::msg::TableCol_double_list::MergeFrom(from._internal_f64());
      break;
    }
    case kStr: {
      _internal_mutable_str()->::com::mdb::proto::msg::TableCol_string_list::MergeFrom(from._internal_str());
      break;
    }
    case kData: {
      _internal_mutable_data()->::com::mdb::proto::msg::TableCol_data_list::MergeFrom(from._internal_data());
      break;
    }
    case VARLIST_NOT_SET: {
      break;
    }
  }
}

void TableCol::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.mdb.proto.msg.TableCol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableCol::CopyFrom(const TableCol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.mdb.proto.msg.TableCol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableCol::IsInitialized() const {
  return true;
}

void TableCol::InternalSwap(TableCol* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(varlist_, other->varlist_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TableCol::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StdTableData::InitAsDefaultInstance() {
}
class StdTableData::_Internal {
 public:
};

StdTableData::StdTableData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.mdb.proto.msg.StdTableData)
}
StdTableData::StdTableData(const StdTableData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      list_(from.list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.mdb.proto.msg.StdTableData)
}

void StdTableData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StdTableData_mdb_2eproto.base);
}

StdTableData::~StdTableData() {
  // @@protoc_insertion_point(destructor:com.mdb.proto.msg.StdTableData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StdTableData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StdTableData::ArenaDtor(void* object) {
  StdTableData* _this = reinterpret_cast< StdTableData* >(object);
  (void)_this;
}
void StdTableData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StdTableData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StdTableData& StdTableData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StdTableData_mdb_2eproto.base);
  return *internal_default_instance();
}


void StdTableData::Clear() {
// @@protoc_insertion_point(message_clear_start:com.mdb.proto.msg.StdTableData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StdTableData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .com.mdb.proto.msg.TableCol list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StdTableData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.mdb.proto.msg.StdTableData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.mdb.proto.msg.TableCol list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.mdb.proto.msg.StdTableData)
  return target;
}

size_t StdTableData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.mdb.proto.msg.StdTableData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.mdb.proto.msg.TableCol list = 1;
  total_size += 1UL * this->_internal_list_size();
  for (const auto& msg : this->list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StdTableData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.mdb.proto.msg.StdTableData)
  GOOGLE_DCHECK_NE(&from, this);
  const StdTableData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StdTableData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.mdb.proto.msg.StdTableData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.mdb.proto.msg.StdTableData)
    MergeFrom(*source);
  }
}

void StdTableData::MergeFrom(const StdTableData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.mdb.proto.msg.StdTableData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void StdTableData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.mdb.proto.msg.StdTableData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StdTableData::CopyFrom(const StdTableData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.mdb.proto.msg.StdTableData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StdTableData::IsInitialized() const {
  return true;
}

void StdTableData::InternalSwap(StdTableData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  list_.InternalSwap(&other->list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StdTableData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Table::InitAsDefaultInstance() {
}
class Table::_Internal {
 public:
};

Table::Table(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.mdb.proto.msg.Table)
}
Table::Table(const Table& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  attr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_attr().empty()) {
    attr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_attr(),
      GetArena());
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:com.mdb.proto.msg.Table)
}

void Table::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Table_mdb_2eproto.base);
  attr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Table::~Table() {
  // @@protoc_insertion_point(destructor:com.mdb.proto.msg.Table)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Table::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  attr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Table::ArenaDtor(void* object) {
  Table* _this = reinterpret_cast< Table* >(object);
  (void)_this;
}
void Table::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Table::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Table& Table::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Table_mdb_2eproto.base);
  return *internal_default_instance();
}


void Table::Clear() {
// @@protoc_insertion_point(message_clear_start:com.mdb.proto.msg.Table)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Table::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes attr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_attr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Table::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.mdb.proto.msg.Table)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes attr = 1;
  if (this->attr().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_attr(), target);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.mdb.proto.msg.Table)
  return target;
}

size_t Table::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.mdb.proto.msg.Table)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes attr = 1;
  if (this->attr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attr());
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Table::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.mdb.proto.msg.Table)
  GOOGLE_DCHECK_NE(&from, this);
  const Table* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Table>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.mdb.proto.msg.Table)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.mdb.proto.msg.Table)
    MergeFrom(*source);
  }
}

void Table::MergeFrom(const Table& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.mdb.proto.msg.Table)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.attr().size() > 0) {
    _internal_set_attr(from._internal_attr());
  }
  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
}

void Table::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.mdb.proto.msg.Table)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Table::CopyFrom(const Table& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.mdb.proto.msg.Table)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Table::IsInitialized() const {
  return true;
}

void Table::InternalSwap(Table* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attr_.Swap(&other->attr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Table::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msg
}  // namespace proto
}  // namespace mdb
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::mdb::proto::msg::TableField* Arena::CreateMaybeMessage< ::com::mdb::proto::msg::TableField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::mdb::proto::msg::TableField >(arena);
}
template<> PROTOBUF_NOINLINE ::com::mdb::proto::msg::StdTableAttr* Arena::CreateMaybeMessage< ::com::mdb::proto::msg::StdTableAttr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::mdb::proto::msg::StdTableAttr >(arena);
}
template<> PROTOBUF_NOINLINE ::com::mdb::proto::msg::TableCol_bool_list* Arena::CreateMaybeMessage< ::com::mdb::proto::msg::TableCol_bool_list >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::mdb::proto::msg::TableCol_bool_list >(arena);
}
template<> PROTOBUF_NOINLINE ::com::mdb::proto::msg::TableCol_uint32_list* Arena::CreateMaybeMessage< ::com::mdb::proto::msg::TableCol_uint32_list >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::mdb::proto::msg::TableCol_uint32_list >(arena);
}
template<> PROTOBUF_NOINLINE ::com::mdb::proto::msg::TableCol_sint32_list* Arena::CreateMaybeMessage< ::com::mdb::proto::msg::TableCol_sint32_list >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::mdb::proto::msg::TableCol_sint32_list >(arena);
}
template<> PROTOBUF_NOINLINE ::com::mdb::proto::msg::TableCol_uint64_list* Arena::CreateMaybeMessage< ::com::mdb::proto::msg::TableCol_uint64_list >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::mdb::proto::msg::TableCol_uint64_list >(arena);
}
template<> PROTOBUF_NOINLINE ::com::mdb::proto::msg::TableCol_sint64_list* Arena::CreateMaybeMessage< ::com::mdb::proto::msg::TableCol_sint64_list >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::mdb::proto::msg::TableCol_sint64_list >(arena);
}
template<> PROTOBUF_NOINLINE ::com::mdb::proto::msg::TableCol_float_list* Arena::CreateMaybeMessage< ::com::mdb::proto::msg::TableCol_float_list >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::mdb::proto::msg::TableCol_float_list >(arena);
}
template<> PROTOBUF_NOINLINE ::com::mdb::proto::msg::TableCol_double_list* Arena::CreateMaybeMessage< ::com::mdb::proto::msg::TableCol_double_list >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::mdb::proto::msg::TableCol_double_list >(arena);
}
template<> PROTOBUF_NOINLINE ::com::mdb::proto::msg::TableCol_string_list* Arena::CreateMaybeMessage< ::com::mdb::proto::msg::TableCol_string_list >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::mdb::proto::msg::TableCol_string_list >(arena);
}
template<> PROTOBUF_NOINLINE ::com::mdb::proto::msg::TableCol_data_list* Arena::CreateMaybeMessage< ::com::mdb::proto::msg::TableCol_data_list >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::mdb::proto::msg::TableCol_data_list >(arena);
}
template<> PROTOBUF_NOINLINE ::com::mdb::proto::msg::TableCol* Arena::CreateMaybeMessage< ::com::mdb::proto::msg::TableCol >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::mdb::proto::msg::TableCol >(arena);
}
template<> PROTOBUF_NOINLINE ::com::mdb::proto::msg::StdTableData* Arena::CreateMaybeMessage< ::com::mdb::proto::msg::StdTableData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::mdb::proto::msg::StdTableData >(arena);
}
template<> PROTOBUF_NOINLINE ::com::mdb::proto::msg::Table* Arena::CreateMaybeMessage< ::com::mdb::proto::msg::Table >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::mdb::proto::msg::Table >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
