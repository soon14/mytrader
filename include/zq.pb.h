// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zq.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_zq_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_zq_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_zq_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_zq_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_zq_2eproto;
namespace com {
namespace zq {
namespace proto {
namespace msg {
class VarMessage;
class VarMessageDefaultTypeInternal;
extern VarMessageDefaultTypeInternal _VarMessage_default_instance_;
class VarMessage_ParamEntry_DoNotUse;
class VarMessage_ParamEntry_DoNotUseDefaultTypeInternal;
extern VarMessage_ParamEntry_DoNotUseDefaultTypeInternal _VarMessage_ParamEntry_DoNotUse_default_instance_;
class Variant;
class VariantDefaultTypeInternal;
extern VariantDefaultTypeInternal _Variant_default_instance_;
}  // namespace msg
}  // namespace proto
}  // namespace zq
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::zq::proto::msg::VarMessage* Arena::CreateMaybeMessage<::com::zq::proto::msg::VarMessage>(Arena*);
template<> ::com::zq::proto::msg::VarMessage_ParamEntry_DoNotUse* Arena::CreateMaybeMessage<::com::zq::proto::msg::VarMessage_ParamEntry_DoNotUse>(Arena*);
template<> ::com::zq::proto::msg::Variant* Arena::CreateMaybeMessage<::com::zq::proto::msg::Variant>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace zq {
namespace proto {
namespace msg {

enum MSG_ID_NOTIFY_TYPE : int {
  MSG_ID_NOTIFY_NULL = 0,
  MSG_ID_NOTIFY_MSG = 1,
  MSG_ID_NOTIFY_USER_ADD = 11,
  MSG_ID_NOTIFY_USER_REMOVE = 12,
  MSG_ID_NOTIFY_USER_UPDATE = 13,
  MSG_ID_NOTIFY_DB_CREATE = 101,
  MSG_ID_NOTIFY_DB_DELETE = 102,
  MSG_ID_NOTIFY_TB_INIT = 201,
  MSG_ID_NOTIFY_TB_DROP = 202,
  MSG_ID_NOTIFY_TB_META = 203,
  MSG_ID_NOTIFY_TB_ATTR = 204,
  MSG_ID_NOTIFY_TB_INSERT = 205,
  MSG_ID_NOTIFY_TB_APPEND = 206,
  MSG_ID_NOTIFY_TB_UPDATE = 207,
  MSG_ID_NOTIFY_TB_REMOVE = 208,
  MSG_ID_NOTIFY_TB_UPDATE_FIELD = 209,
  MSG_ID_NOTIFY_TD_ORDER_INSERT = 301,
  MSG_ID_NOTIFY_TD_ORDER_CANCEL = 302,
  MSG_ID_NOTIFY_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MSG_ID_NOTIFY_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MSG_ID_NOTIFY_TYPE_IsValid(int value);
constexpr MSG_ID_NOTIFY_TYPE MSG_ID_NOTIFY_TYPE_MIN = MSG_ID_NOTIFY_NULL;
constexpr MSG_ID_NOTIFY_TYPE MSG_ID_NOTIFY_TYPE_MAX = MSG_ID_NOTIFY_TD_ORDER_CANCEL;
constexpr int MSG_ID_NOTIFY_TYPE_ARRAYSIZE = MSG_ID_NOTIFY_TYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MSG_ID_NOTIFY_TYPE_descriptor();
template<typename T>
inline const std::string& MSG_ID_NOTIFY_TYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MSG_ID_NOTIFY_TYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MSG_ID_NOTIFY_TYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MSG_ID_NOTIFY_TYPE_descriptor(), enum_t_value);
}
inline bool MSG_ID_NOTIFY_TYPE_Parse(
    const std::string& name, MSG_ID_NOTIFY_TYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MSG_ID_NOTIFY_TYPE>(
    MSG_ID_NOTIFY_TYPE_descriptor(), name, value);
}
enum MSG_ID_REQUEST_DO_TYPE : int {
  MSG_ID_REQUEST_DO_NULL = 0,
  MSG_ID_REQUEST_DO_MSG = 1,
  MSG_ID_REQUEST_DO_USER_ADD = 11,
  MSG_ID_REQUEST_DO_USER_REMOVE = 12,
  MSG_ID_REQUEST_DO_USER_UPDATE = 13,
  MSG_ID_REQUEST_DO_DB_CREATE = 101,
  MSG_ID_REQUEST_DO_DB_DELETE = 102,
  MSG_ID_REQUEST_DO_TB_INIT = 201,
  MSG_ID_REQUEST_DO_TB_DROP = 202,
  MSG_ID_REQUEST_DO_TB_META = 203,
  MSG_ID_REQUEST_DO_TB_ATTR = 204,
  MSG_ID_REQUEST_DO_TB_INSERT = 205,
  MSG_ID_REQUEST_DO_TB_APPEND = 206,
  MSG_ID_REQUEST_DO_TB_UPDATE = 207,
  MSG_ID_REQUEST_DO_TB_REMOVE = 208,
  MSG_ID_REQUEST_DO_TB_UPDATE_FIELD = 209,
  MSG_ID_REQUEST_DO_TD_ORDER_INSERT = 301,
  MSG_ID_REQUEST_DO_TD_ORDER_CANCEL = 302,
  MSG_ID_REQUEST_DO_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MSG_ID_REQUEST_DO_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MSG_ID_REQUEST_DO_TYPE_IsValid(int value);
constexpr MSG_ID_REQUEST_DO_TYPE MSG_ID_REQUEST_DO_TYPE_MIN = MSG_ID_REQUEST_DO_NULL;
constexpr MSG_ID_REQUEST_DO_TYPE MSG_ID_REQUEST_DO_TYPE_MAX = MSG_ID_REQUEST_DO_TD_ORDER_CANCEL;
constexpr int MSG_ID_REQUEST_DO_TYPE_ARRAYSIZE = MSG_ID_REQUEST_DO_TYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MSG_ID_REQUEST_DO_TYPE_descriptor();
template<typename T>
inline const std::string& MSG_ID_REQUEST_DO_TYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MSG_ID_REQUEST_DO_TYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MSG_ID_REQUEST_DO_TYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MSG_ID_REQUEST_DO_TYPE_descriptor(), enum_t_value);
}
inline bool MSG_ID_REQUEST_DO_TYPE_Parse(
    const std::string& name, MSG_ID_REQUEST_DO_TYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MSG_ID_REQUEST_DO_TYPE>(
    MSG_ID_REQUEST_DO_TYPE_descriptor(), name, value);
}
enum MSG_ID_REQUEST_QUERY_TYPE : int {
  MSG_ID_REQUEST_QUERY_NULL = 0,
  MSG_ID_REQUEST_QUERY_USER = 10,
  MSG_ID_REQUEST_QUERY_DB = 100,
  MSG_ID_REQUEST_QUERY_TB = 200,
  MSG_ID_REQUEST_QUERY_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MSG_ID_REQUEST_QUERY_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MSG_ID_REQUEST_QUERY_TYPE_IsValid(int value);
constexpr MSG_ID_REQUEST_QUERY_TYPE MSG_ID_REQUEST_QUERY_TYPE_MIN = MSG_ID_REQUEST_QUERY_NULL;
constexpr MSG_ID_REQUEST_QUERY_TYPE MSG_ID_REQUEST_QUERY_TYPE_MAX = MSG_ID_REQUEST_QUERY_TB;
constexpr int MSG_ID_REQUEST_QUERY_TYPE_ARRAYSIZE = MSG_ID_REQUEST_QUERY_TYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MSG_ID_REQUEST_QUERY_TYPE_descriptor();
template<typename T>
inline const std::string& MSG_ID_REQUEST_QUERY_TYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MSG_ID_REQUEST_QUERY_TYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MSG_ID_REQUEST_QUERY_TYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MSG_ID_REQUEST_QUERY_TYPE_descriptor(), enum_t_value);
}
inline bool MSG_ID_REQUEST_QUERY_TYPE_Parse(
    const std::string& name, MSG_ID_REQUEST_QUERY_TYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MSG_ID_REQUEST_QUERY_TYPE>(
    MSG_ID_REQUEST_QUERY_TYPE_descriptor(), name, value);
}
// ===================================================================

class Variant PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.zq.proto.msg.Variant) */ {
 public:
  inline Variant() : Variant(nullptr) {};
  virtual ~Variant();

  Variant(const Variant& from);
  Variant(Variant&& from) noexcept
    : Variant() {
    *this = ::std::move(from);
  }

  inline Variant& operator=(const Variant& from) {
    CopyFrom(from);
    return *this;
  }
  inline Variant& operator=(Variant&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Variant& default_instance();

  enum VariantCase {
    kU64 = 1,
    kI64 = 2,
    kF = 3,
    kStr = 4,
    kData = 5,
    VARIANT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Variant* internal_default_instance() {
    return reinterpret_cast<const Variant*>(
               &_Variant_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Variant& a, Variant& b) {
    a.Swap(&b);
  }
  inline void Swap(Variant* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Variant* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Variant* New() const final {
    return CreateMaybeMessage<Variant>(nullptr);
  }

  Variant* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Variant>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Variant& from);
  void MergeFrom(const Variant& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Variant* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.zq.proto.msg.Variant";
  }
  protected:
  explicit Variant(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zq_2eproto);
    return ::descriptor_table_zq_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kU64FieldNumber = 1,
    kI64FieldNumber = 2,
    kFFieldNumber = 3,
    kStrFieldNumber = 4,
    kDataFieldNumber = 5,
  };
  // uint64 u64 = 1;
  private:
  bool _internal_has_u64() const;
  public:
  void clear_u64();
  ::PROTOBUF_NAMESPACE_ID::uint64 u64() const;
  void set_u64(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_u64() const;
  void _internal_set_u64(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // sint64 i64 = 2;
  private:
  bool _internal_has_i64() const;
  public:
  void clear_i64();
  ::PROTOBUF_NAMESPACE_ID::int64 i64() const;
  void set_i64(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_i64() const;
  void _internal_set_i64(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // double f = 3;
  private:
  bool _internal_has_f() const;
  public:
  void clear_f();
  double f() const;
  void set_f(double value);
  private:
  double _internal_f() const;
  void _internal_set_f(double value);
  public:

  // string str = 4;
  private:
  bool _internal_has_str() const;
  public:
  void clear_str();
  const std::string& str() const;
  void set_str(const std::string& value);
  void set_str(std::string&& value);
  void set_str(const char* value);
  void set_str(const char* value, size_t size);
  std::string* mutable_str();
  std::string* release_str();
  void set_allocated_str(std::string* str);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_str();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_str(
      std::string* str);
  private:
  const std::string& _internal_str() const;
  void _internal_set_str(const std::string& value);
  std::string* _internal_mutable_str();
  public:

  // bytes data = 5;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  void clear_variant();
  VariantCase variant_case() const;
  // @@protoc_insertion_point(class_scope:com.zq.proto.msg.Variant)
 private:
  class _Internal;
  void set_has_u64();
  void set_has_i64();
  void set_has_f();
  void set_has_str();
  void set_has_data();

  inline bool has_variant() const;
  inline void clear_has_variant();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union VariantUnion {
    VariantUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint64 u64_;
    ::PROTOBUF_NAMESPACE_ID::int64 i64_;
    double f_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  } variant_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_zq_2eproto;
};
// -------------------------------------------------------------------

class VarMessage_ParamEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<VarMessage_ParamEntry_DoNotUse, 
    std::string, ::com::zq::proto::msg::Variant,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<VarMessage_ParamEntry_DoNotUse, 
    std::string, ::com::zq::proto::msg::Variant,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  VarMessage_ParamEntry_DoNotUse();
  VarMessage_ParamEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const VarMessage_ParamEntry_DoNotUse& other);
  static const VarMessage_ParamEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const VarMessage_ParamEntry_DoNotUse*>(&_VarMessage_ParamEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "com.zq.proto.msg.VarMessage.ParamEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zq_2eproto);
    return ::descriptor_table_zq_2eproto.file_level_metadata[1];
  }

  public:
};

// -------------------------------------------------------------------

class VarMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.zq.proto.msg.VarMessage) */ {
 public:
  inline VarMessage() : VarMessage(nullptr) {};
  virtual ~VarMessage();

  VarMessage(const VarMessage& from);
  VarMessage(VarMessage&& from) noexcept
    : VarMessage() {
    *this = ::std::move(from);
  }

  inline VarMessage& operator=(const VarMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline VarMessage& operator=(VarMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VarMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VarMessage* internal_default_instance() {
    return reinterpret_cast<const VarMessage*>(
               &_VarMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(VarMessage& a, VarMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(VarMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VarMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VarMessage* New() const final {
    return CreateMaybeMessage<VarMessage>(nullptr);
  }

  VarMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VarMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VarMessage& from);
  void MergeFrom(const VarMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VarMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.zq.proto.msg.VarMessage";
  }
  protected:
  explicit VarMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zq_2eproto);
    return ::descriptor_table_zq_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kParamFieldNumber = 3,
    kTypeFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // map<string, .com.zq.proto.msg.Variant> param = 3;
  int param_size() const;
  private:
  int _internal_param_size() const;
  public:
  void clear_param();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::com::zq::proto::msg::Variant >&
      _internal_param() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::com::zq::proto::msg::Variant >*
      _internal_mutable_param();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::com::zq::proto::msg::Variant >&
      param() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::com::zq::proto::msg::Variant >*
      mutable_param();

  // int32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:com.zq.proto.msg.VarMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      VarMessage_ParamEntry_DoNotUse,
      std::string, ::com::zq::proto::msg::Variant,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > param_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_zq_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Variant

// uint64 u64 = 1;
inline bool Variant::_internal_has_u64() const {
  return variant_case() == kU64;
}
inline void Variant::set_has_u64() {
  _oneof_case_[0] = kU64;
}
inline void Variant::clear_u64() {
  if (_internal_has_u64()) {
    variant_.u64_ = PROTOBUF_ULONGLONG(0);
    clear_has_variant();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Variant::_internal_u64() const {
  if (_internal_has_u64()) {
    return variant_.u64_;
  }
  return PROTOBUF_ULONGLONG(0);
}
inline void Variant::_internal_set_u64(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!_internal_has_u64()) {
    clear_variant();
    set_has_u64();
  }
  variant_.u64_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Variant::u64() const {
  // @@protoc_insertion_point(field_get:com.zq.proto.msg.Variant.u64)
  return _internal_u64();
}
inline void Variant::set_u64(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_u64(value);
  // @@protoc_insertion_point(field_set:com.zq.proto.msg.Variant.u64)
}

// sint64 i64 = 2;
inline bool Variant::_internal_has_i64() const {
  return variant_case() == kI64;
}
inline void Variant::set_has_i64() {
  _oneof_case_[0] = kI64;
}
inline void Variant::clear_i64() {
  if (_internal_has_i64()) {
    variant_.i64_ = PROTOBUF_LONGLONG(0);
    clear_has_variant();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Variant::_internal_i64() const {
  if (_internal_has_i64()) {
    return variant_.i64_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void Variant::_internal_set_i64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_i64()) {
    clear_variant();
    set_has_i64();
  }
  variant_.i64_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Variant::i64() const {
  // @@protoc_insertion_point(field_get:com.zq.proto.msg.Variant.i64)
  return _internal_i64();
}
inline void Variant::set_i64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_i64(value);
  // @@protoc_insertion_point(field_set:com.zq.proto.msg.Variant.i64)
}

// double f = 3;
inline bool Variant::_internal_has_f() const {
  return variant_case() == kF;
}
inline void Variant::set_has_f() {
  _oneof_case_[0] = kF;
}
inline void Variant::clear_f() {
  if (_internal_has_f()) {
    variant_.f_ = 0;
    clear_has_variant();
  }
}
inline double Variant::_internal_f() const {
  if (_internal_has_f()) {
    return variant_.f_;
  }
  return 0;
}
inline void Variant::_internal_set_f(double value) {
  if (!_internal_has_f()) {
    clear_variant();
    set_has_f();
  }
  variant_.f_ = value;
}
inline double Variant::f() const {
  // @@protoc_insertion_point(field_get:com.zq.proto.msg.Variant.f)
  return _internal_f();
}
inline void Variant::set_f(double value) {
  _internal_set_f(value);
  // @@protoc_insertion_point(field_set:com.zq.proto.msg.Variant.f)
}

// string str = 4;
inline bool Variant::_internal_has_str() const {
  return variant_case() == kStr;
}
inline void Variant::set_has_str() {
  _oneof_case_[0] = kStr;
}
inline void Variant::clear_str() {
  if (_internal_has_str()) {
    variant_.str_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_variant();
  }
}
inline const std::string& Variant::str() const {
  // @@protoc_insertion_point(field_get:com.zq.proto.msg.Variant.str)
  return _internal_str();
}
inline void Variant::set_str(const std::string& value) {
  _internal_set_str(value);
  // @@protoc_insertion_point(field_set:com.zq.proto.msg.Variant.str)
}
inline std::string* Variant::mutable_str() {
  // @@protoc_insertion_point(field_mutable:com.zq.proto.msg.Variant.str)
  return _internal_mutable_str();
}
inline const std::string& Variant::_internal_str() const {
  if (_internal_has_str()) {
    return variant_.str_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Variant::_internal_set_str(const std::string& value) {
  if (!_internal_has_str()) {
    clear_variant();
    set_has_str();
    variant_.str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  variant_.str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Variant::set_str(std::string&& value) {
  // @@protoc_insertion_point(field_set:com.zq.proto.msg.Variant.str)
  if (!_internal_has_str()) {
    clear_variant();
    set_has_str();
    variant_.str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  variant_.str_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.zq.proto.msg.Variant.str)
}
inline void Variant::set_str(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_str()) {
    clear_variant();
    set_has_str();
    variant_.str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  variant_.str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.zq.proto.msg.Variant.str)
}
inline void Variant::set_str(const char* value,
                             size_t size) {
  if (!_internal_has_str()) {
    clear_variant();
    set_has_str();
    variant_.str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  variant_.str_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.zq.proto.msg.Variant.str)
}
inline std::string* Variant::_internal_mutable_str() {
  if (!_internal_has_str()) {
    clear_variant();
    set_has_str();
    variant_.str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return variant_.str_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Variant::release_str() {
  // @@protoc_insertion_point(field_release:com.zq.proto.msg.Variant.str)
  if (_internal_has_str()) {
    clear_has_variant();
    return variant_.str_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void Variant::set_allocated_str(std::string* str) {
  if (has_variant()) {
    clear_variant();
  }
  if (str != nullptr) {
    set_has_str();
    variant_.str_.UnsafeSetDefault(str);
  }
  // @@protoc_insertion_point(field_set_allocated:com.zq.proto.msg.Variant.str)
}
inline std::string* Variant::unsafe_arena_release_str() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.zq.proto.msg.Variant.str)
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (_internal_has_str()) {
    clear_has_variant();
    return variant_.str_.UnsafeArenaRelease(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void Variant::unsafe_arena_set_allocated_str(std::string* str) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (!_internal_has_str()) {
    variant_.str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  clear_variant();
  if (str) {
    set_has_str();
    variant_.str_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), str, GetArena());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.zq.proto.msg.Variant.str)
}

// bytes data = 5;
inline bool Variant::_internal_has_data() const {
  return variant_case() == kData;
}
inline void Variant::set_has_data() {
  _oneof_case_[0] = kData;
}
inline void Variant::clear_data() {
  if (_internal_has_data()) {
    variant_.data_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_variant();
  }
}
inline const std::string& Variant::data() const {
  // @@protoc_insertion_point(field_get:com.zq.proto.msg.Variant.data)
  return _internal_data();
}
inline void Variant::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:com.zq.proto.msg.Variant.data)
}
inline std::string* Variant::mutable_data() {
  // @@protoc_insertion_point(field_mutable:com.zq.proto.msg.Variant.data)
  return _internal_mutable_data();
}
inline const std::string& Variant::_internal_data() const {
  if (_internal_has_data()) {
    return variant_.data_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Variant::_internal_set_data(const std::string& value) {
  if (!_internal_has_data()) {
    clear_variant();
    set_has_data();
    variant_.data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  variant_.data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Variant::set_data(std::string&& value) {
  // @@protoc_insertion_point(field_set:com.zq.proto.msg.Variant.data)
  if (!_internal_has_data()) {
    clear_variant();
    set_has_data();
    variant_.data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  variant_.data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.zq.proto.msg.Variant.data)
}
inline void Variant::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_data()) {
    clear_variant();
    set_has_data();
    variant_.data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  variant_.data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.zq.proto.msg.Variant.data)
}
inline void Variant::set_data(const void* value,
                             size_t size) {
  if (!_internal_has_data()) {
    clear_variant();
    set_has_data();
    variant_.data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  variant_.data_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.zq.proto.msg.Variant.data)
}
inline std::string* Variant::_internal_mutable_data() {
  if (!_internal_has_data()) {
    clear_variant();
    set_has_data();
    variant_.data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return variant_.data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Variant::release_data() {
  // @@protoc_insertion_point(field_release:com.zq.proto.msg.Variant.data)
  if (_internal_has_data()) {
    clear_has_variant();
    return variant_.data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void Variant::set_allocated_data(std::string* data) {
  if (has_variant()) {
    clear_variant();
  }
  if (data != nullptr) {
    set_has_data();
    variant_.data_.UnsafeSetDefault(data);
  }
  // @@protoc_insertion_point(field_set_allocated:com.zq.proto.msg.Variant.data)
}
inline std::string* Variant::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.zq.proto.msg.Variant.data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (_internal_has_data()) {
    clear_has_variant();
    return variant_.data_.UnsafeArenaRelease(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void Variant::unsafe_arena_set_allocated_data(std::string* data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (!_internal_has_data()) {
    variant_.data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  clear_variant();
  if (data) {
    set_has_data();
    variant_.data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data, GetArena());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.zq.proto.msg.Variant.data)
}

inline bool Variant::has_variant() const {
  return variant_case() != VARIANT_NOT_SET;
}
inline void Variant::clear_has_variant() {
  _oneof_case_[0] = VARIANT_NOT_SET;
}
inline Variant::VariantCase Variant::variant_case() const {
  return Variant::VariantCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// VarMessage

// int32 type = 1;
inline void VarMessage::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VarMessage::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VarMessage::type() const {
  // @@protoc_insertion_point(field_get:com.zq.proto.msg.VarMessage.type)
  return _internal_type();
}
inline void VarMessage::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void VarMessage::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:com.zq.proto.msg.VarMessage.type)
}

// int32 id = 2;
inline void VarMessage::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VarMessage::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VarMessage::id() const {
  // @@protoc_insertion_point(field_get:com.zq.proto.msg.VarMessage.id)
  return _internal_id();
}
inline void VarMessage::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void VarMessage::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:com.zq.proto.msg.VarMessage.id)
}

// map<string, .com.zq.proto.msg.Variant> param = 3;
inline int VarMessage::_internal_param_size() const {
  return param_.size();
}
inline int VarMessage::param_size() const {
  return _internal_param_size();
}
inline void VarMessage::clear_param() {
  param_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::com::zq::proto::msg::Variant >&
VarMessage::_internal_param() const {
  return param_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::com::zq::proto::msg::Variant >&
VarMessage::param() const {
  // @@protoc_insertion_point(field_map:com.zq.proto.msg.VarMessage.param)
  return _internal_param();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::com::zq::proto::msg::Variant >*
VarMessage::_internal_mutable_param() {
  return param_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::com::zq::proto::msg::Variant >*
VarMessage::mutable_param() {
  // @@protoc_insertion_point(field_mutable_map:com.zq.proto.msg.VarMessage.param)
  return _internal_mutable_param();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace msg
}  // namespace proto
}  // namespace zq
}  // namespace com

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::com::zq::proto::msg::MSG_ID_NOTIFY_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::zq::proto::msg::MSG_ID_NOTIFY_TYPE>() {
  return ::com::zq::proto::msg::MSG_ID_NOTIFY_TYPE_descriptor();
}
template <> struct is_proto_enum< ::com::zq::proto::msg::MSG_ID_REQUEST_DO_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::zq::proto::msg::MSG_ID_REQUEST_DO_TYPE>() {
  return ::com::zq::proto::msg::MSG_ID_REQUEST_DO_TYPE_descriptor();
}
template <> struct is_proto_enum< ::com::zq::proto::msg::MSG_ID_REQUEST_QUERY_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::zq::proto::msg::MSG_ID_REQUEST_QUERY_TYPE>() {
  return ::com::zq::proto::msg::MSG_ID_REQUEST_QUERY_TYPE_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_zq_2eproto
