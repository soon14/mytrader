// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mdb.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mdb_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mdb_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mdb_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mdb_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[14]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mdb_2eproto;
namespace com {
namespace mdb {
namespace proto {
namespace msg {
class StdTableAttr;
class StdTableAttrDefaultTypeInternal;
extern StdTableAttrDefaultTypeInternal _StdTableAttr_default_instance_;
class StdTableData;
class StdTableDataDefaultTypeInternal;
extern StdTableDataDefaultTypeInternal _StdTableData_default_instance_;
class Table;
class TableDefaultTypeInternal;
extern TableDefaultTypeInternal _Table_default_instance_;
class TableCol;
class TableColDefaultTypeInternal;
extern TableColDefaultTypeInternal _TableCol_default_instance_;
class TableCol_bool_list;
class TableCol_bool_listDefaultTypeInternal;
extern TableCol_bool_listDefaultTypeInternal _TableCol_bool_list_default_instance_;
class TableCol_data_list;
class TableCol_data_listDefaultTypeInternal;
extern TableCol_data_listDefaultTypeInternal _TableCol_data_list_default_instance_;
class TableCol_double_list;
class TableCol_double_listDefaultTypeInternal;
extern TableCol_double_listDefaultTypeInternal _TableCol_double_list_default_instance_;
class TableCol_float_list;
class TableCol_float_listDefaultTypeInternal;
extern TableCol_float_listDefaultTypeInternal _TableCol_float_list_default_instance_;
class TableCol_sint32_list;
class TableCol_sint32_listDefaultTypeInternal;
extern TableCol_sint32_listDefaultTypeInternal _TableCol_sint32_list_default_instance_;
class TableCol_sint64_list;
class TableCol_sint64_listDefaultTypeInternal;
extern TableCol_sint64_listDefaultTypeInternal _TableCol_sint64_list_default_instance_;
class TableCol_string_list;
class TableCol_string_listDefaultTypeInternal;
extern TableCol_string_listDefaultTypeInternal _TableCol_string_list_default_instance_;
class TableCol_uint32_list;
class TableCol_uint32_listDefaultTypeInternal;
extern TableCol_uint32_listDefaultTypeInternal _TableCol_uint32_list_default_instance_;
class TableCol_uint64_list;
class TableCol_uint64_listDefaultTypeInternal;
extern TableCol_uint64_listDefaultTypeInternal _TableCol_uint64_list_default_instance_;
class TableField;
class TableFieldDefaultTypeInternal;
extern TableFieldDefaultTypeInternal _TableField_default_instance_;
}  // namespace msg
}  // namespace proto
}  // namespace mdb
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::mdb::proto::msg::StdTableAttr* Arena::CreateMaybeMessage<::com::mdb::proto::msg::StdTableAttr>(Arena*);
template<> ::com::mdb::proto::msg::StdTableData* Arena::CreateMaybeMessage<::com::mdb::proto::msg::StdTableData>(Arena*);
template<> ::com::mdb::proto::msg::Table* Arena::CreateMaybeMessage<::com::mdb::proto::msg::Table>(Arena*);
template<> ::com::mdb::proto::msg::TableCol* Arena::CreateMaybeMessage<::com::mdb::proto::msg::TableCol>(Arena*);
template<> ::com::mdb::proto::msg::TableCol_bool_list* Arena::CreateMaybeMessage<::com::mdb::proto::msg::TableCol_bool_list>(Arena*);
template<> ::com::mdb::proto::msg::TableCol_data_list* Arena::CreateMaybeMessage<::com::mdb::proto::msg::TableCol_data_list>(Arena*);
template<> ::com::mdb::proto::msg::TableCol_double_list* Arena::CreateMaybeMessage<::com::mdb::proto::msg::TableCol_double_list>(Arena*);
template<> ::com::mdb::proto::msg::TableCol_float_list* Arena::CreateMaybeMessage<::com::mdb::proto::msg::TableCol_float_list>(Arena*);
template<> ::com::mdb::proto::msg::TableCol_sint32_list* Arena::CreateMaybeMessage<::com::mdb::proto::msg::TableCol_sint32_list>(Arena*);
template<> ::com::mdb::proto::msg::TableCol_sint64_list* Arena::CreateMaybeMessage<::com::mdb::proto::msg::TableCol_sint64_list>(Arena*);
template<> ::com::mdb::proto::msg::TableCol_string_list* Arena::CreateMaybeMessage<::com::mdb::proto::msg::TableCol_string_list>(Arena*);
template<> ::com::mdb::proto::msg::TableCol_uint32_list* Arena::CreateMaybeMessage<::com::mdb::proto::msg::TableCol_uint32_list>(Arena*);
template<> ::com::mdb::proto::msg::TableCol_uint64_list* Arena::CreateMaybeMessage<::com::mdb::proto::msg::TableCol_uint64_list>(Arena*);
template<> ::com::mdb::proto::msg::TableField* Arena::CreateMaybeMessage<::com::mdb::proto::msg::TableField>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace mdb {
namespace proto {
namespace msg {

enum MSG_ID_NOTIFY_TYPE : int {
  MSG_ID_NOTIFY_NULL = 0,
  MSG_ID_NOTIFY_MSG = 1,
  MSG_ID_NOTIFY_USER_ADD = 11,
  MSG_ID_NOTIFY_USER_REMOVE = 12,
  MSG_ID_NOTIFY_USER_UPDATE = 13,
  MSG_ID_NOTIFY_DB_CREATE = 101,
  MSG_ID_NOTIFY_DB_DELETE = 102,
  MSG_ID_NOTIFY_TB_INIT = 201,
  MSG_ID_NOTIFY_TB_DROP = 202,
  MSG_ID_NOTIFY_TB_META = 203,
  MSG_ID_NOTIFY_TB_ATTR = 204,
  MSG_ID_NOTIFY_TB_INSERT = 205,
  MSG_ID_NOTIFY_TB_APPEND = 206,
  MSG_ID_NOTIFY_TB_UPDATE = 207,
  MSG_ID_NOTIFY_TB_REMOVE = 208,
  MSG_ID_NOTIFY_TB_UPDATE_FIELD = 209,
  MSG_ID_NOTIFY_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MSG_ID_NOTIFY_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MSG_ID_NOTIFY_TYPE_IsValid(int value);
constexpr MSG_ID_NOTIFY_TYPE MSG_ID_NOTIFY_TYPE_MIN = MSG_ID_NOTIFY_NULL;
constexpr MSG_ID_NOTIFY_TYPE MSG_ID_NOTIFY_TYPE_MAX = MSG_ID_NOTIFY_TB_UPDATE_FIELD;
constexpr int MSG_ID_NOTIFY_TYPE_ARRAYSIZE = MSG_ID_NOTIFY_TYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MSG_ID_NOTIFY_TYPE_descriptor();
template<typename T>
inline const std::string& MSG_ID_NOTIFY_TYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MSG_ID_NOTIFY_TYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MSG_ID_NOTIFY_TYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MSG_ID_NOTIFY_TYPE_descriptor(), enum_t_value);
}
inline bool MSG_ID_NOTIFY_TYPE_Parse(
    const std::string& name, MSG_ID_NOTIFY_TYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MSG_ID_NOTIFY_TYPE>(
    MSG_ID_NOTIFY_TYPE_descriptor(), name, value);
}
enum MSG_ID_REQUEST_DO_TYPE : int {
  MSG_ID_REQUEST_DO_NULL = 0,
  MSG_ID_REQUEST_DO_MSG = 1,
  MSG_ID_REQUEST_DO_USER_ADD = 11,
  MSG_ID_REQUEST_DO_USER_REMOVE = 12,
  MSG_ID_REQUEST_DO_USER_UPDATE = 13,
  MSG_ID_REQUEST_DO_DB_CREATE = 101,
  MSG_ID_REQUEST_DO_DB_DELETE = 102,
  MSG_ID_REQUEST_DO_TB_INIT = 201,
  MSG_ID_REQUEST_DO_TB_DROP = 202,
  MSG_ID_REQUEST_DO_TB_META = 203,
  MSG_ID_REQUEST_DO_TB_ATTR = 204,
  MSG_ID_REQUEST_DO_TB_INSERT = 205,
  MSG_ID_REQUEST_DO_TB_APPEND = 206,
  MSG_ID_REQUEST_DO_TB_UPDATE = 207,
  MSG_ID_REQUEST_DO_TB_REMOVE = 208,
  MSG_ID_REQUEST_DO_TB_UPDATE_FIELD = 209,
  MSG_ID_REQUEST_DO_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MSG_ID_REQUEST_DO_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MSG_ID_REQUEST_DO_TYPE_IsValid(int value);
constexpr MSG_ID_REQUEST_DO_TYPE MSG_ID_REQUEST_DO_TYPE_MIN = MSG_ID_REQUEST_DO_NULL;
constexpr MSG_ID_REQUEST_DO_TYPE MSG_ID_REQUEST_DO_TYPE_MAX = MSG_ID_REQUEST_DO_TB_UPDATE_FIELD;
constexpr int MSG_ID_REQUEST_DO_TYPE_ARRAYSIZE = MSG_ID_REQUEST_DO_TYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MSG_ID_REQUEST_DO_TYPE_descriptor();
template<typename T>
inline const std::string& MSG_ID_REQUEST_DO_TYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MSG_ID_REQUEST_DO_TYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MSG_ID_REQUEST_DO_TYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MSG_ID_REQUEST_DO_TYPE_descriptor(), enum_t_value);
}
inline bool MSG_ID_REQUEST_DO_TYPE_Parse(
    const std::string& name, MSG_ID_REQUEST_DO_TYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MSG_ID_REQUEST_DO_TYPE>(
    MSG_ID_REQUEST_DO_TYPE_descriptor(), name, value);
}
enum MSG_ID_REQUEST_QUERY_TYPE : int {
  MSG_ID_REQUEST_QUERY_NULL = 0,
  MSG_ID_REQUEST_QUERY_USER = 10,
  MSG_ID_REQUEST_QUERY_DB = 100,
  MSG_ID_REQUEST_QUERY_TB = 200,
  MSG_ID_REQUEST_QUERY_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MSG_ID_REQUEST_QUERY_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MSG_ID_REQUEST_QUERY_TYPE_IsValid(int value);
constexpr MSG_ID_REQUEST_QUERY_TYPE MSG_ID_REQUEST_QUERY_TYPE_MIN = MSG_ID_REQUEST_QUERY_NULL;
constexpr MSG_ID_REQUEST_QUERY_TYPE MSG_ID_REQUEST_QUERY_TYPE_MAX = MSG_ID_REQUEST_QUERY_TB;
constexpr int MSG_ID_REQUEST_QUERY_TYPE_ARRAYSIZE = MSG_ID_REQUEST_QUERY_TYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MSG_ID_REQUEST_QUERY_TYPE_descriptor();
template<typename T>
inline const std::string& MSG_ID_REQUEST_QUERY_TYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MSG_ID_REQUEST_QUERY_TYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MSG_ID_REQUEST_QUERY_TYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MSG_ID_REQUEST_QUERY_TYPE_descriptor(), enum_t_value);
}
inline bool MSG_ID_REQUEST_QUERY_TYPE_Parse(
    const std::string& name, MSG_ID_REQUEST_QUERY_TYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MSG_ID_REQUEST_QUERY_TYPE>(
    MSG_ID_REQUEST_QUERY_TYPE_descriptor(), name, value);
}
// ===================================================================

class TableField PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.mdb.proto.msg.TableField) */ {
 public:
  inline TableField() : TableField(nullptr) {};
  virtual ~TableField();

  TableField(const TableField& from);
  TableField(TableField&& from) noexcept
    : TableField() {
    *this = ::std::move(from);
  }

  inline TableField& operator=(const TableField& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableField& operator=(TableField&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TableField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TableField* internal_default_instance() {
    return reinterpret_cast<const TableField*>(
               &_TableField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TableField& a, TableField& b) {
    a.Swap(&b);
  }
  inline void Swap(TableField* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TableField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TableField* New() const final {
    return CreateMaybeMessage<TableField>(nullptr);
  }

  TableField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TableField>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TableField& from);
  void MergeFrom(const TableField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.mdb.proto.msg.TableField";
  }
  protected:
  explicit TableField(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mdb_2eproto);
    return ::descriptor_table_mdb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kSizeFieldNumber = 3,
  };
  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 size = 3;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:com.mdb.proto.msg.TableField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mdb_2eproto;
};
// -------------------------------------------------------------------

class StdTableAttr PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.mdb.proto.msg.StdTableAttr) */ {
 public:
  inline StdTableAttr() : StdTableAttr(nullptr) {};
  virtual ~StdTableAttr();

  StdTableAttr(const StdTableAttr& from);
  StdTableAttr(StdTableAttr&& from) noexcept
    : StdTableAttr() {
    *this = ::std::move(from);
  }

  inline StdTableAttr& operator=(const StdTableAttr& from) {
    CopyFrom(from);
    return *this;
  }
  inline StdTableAttr& operator=(StdTableAttr&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StdTableAttr& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StdTableAttr* internal_default_instance() {
    return reinterpret_cast<const StdTableAttr*>(
               &_StdTableAttr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StdTableAttr& a, StdTableAttr& b) {
    a.Swap(&b);
  }
  inline void Swap(StdTableAttr* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StdTableAttr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StdTableAttr* New() const final {
    return CreateMaybeMessage<StdTableAttr>(nullptr);
  }

  StdTableAttr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StdTableAttr>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StdTableAttr& from);
  void MergeFrom(const StdTableAttr& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StdTableAttr* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.mdb.proto.msg.StdTableAttr";
  }
  protected:
  explicit StdTableAttr(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mdb_2eproto);
    return ::descriptor_table_mdb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldFieldNumber = 1,
  };
  // repeated .com.mdb.proto.msg.TableField field = 1;
  int field_size() const;
  private:
  int _internal_field_size() const;
  public:
  void clear_field();
  ::com::mdb::proto::msg::TableField* mutable_field(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::mdb::proto::msg::TableField >*
      mutable_field();
  private:
  const ::com::mdb::proto::msg::TableField& _internal_field(int index) const;
  ::com::mdb::proto::msg::TableField* _internal_add_field();
  public:
  const ::com::mdb::proto::msg::TableField& field(int index) const;
  ::com::mdb::proto::msg::TableField* add_field();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::mdb::proto::msg::TableField >&
      field() const;

  // @@protoc_insertion_point(class_scope:com.mdb.proto.msg.StdTableAttr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::mdb::proto::msg::TableField > field_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mdb_2eproto;
};
// -------------------------------------------------------------------

class TableCol_bool_list PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.mdb.proto.msg.TableCol.bool_list) */ {
 public:
  inline TableCol_bool_list() : TableCol_bool_list(nullptr) {};
  virtual ~TableCol_bool_list();

  TableCol_bool_list(const TableCol_bool_list& from);
  TableCol_bool_list(TableCol_bool_list&& from) noexcept
    : TableCol_bool_list() {
    *this = ::std::move(from);
  }

  inline TableCol_bool_list& operator=(const TableCol_bool_list& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableCol_bool_list& operator=(TableCol_bool_list&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TableCol_bool_list& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TableCol_bool_list* internal_default_instance() {
    return reinterpret_cast<const TableCol_bool_list*>(
               &_TableCol_bool_list_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TableCol_bool_list& a, TableCol_bool_list& b) {
    a.Swap(&b);
  }
  inline void Swap(TableCol_bool_list* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TableCol_bool_list* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TableCol_bool_list* New() const final {
    return CreateMaybeMessage<TableCol_bool_list>(nullptr);
  }

  TableCol_bool_list* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TableCol_bool_list>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TableCol_bool_list& from);
  void MergeFrom(const TableCol_bool_list& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableCol_bool_list* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.mdb.proto.msg.TableCol.bool_list";
  }
  protected:
  explicit TableCol_bool_list(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mdb_2eproto);
    return ::descriptor_table_mdb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBFieldNumber = 1,
  };
  // repeated bool b = 1;
  int b_size() const;
  private:
  int _internal_b_size() const;
  public:
  void clear_b();
  private:
  bool _internal_b(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_b() const;
  void _internal_add_b(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_b();
  public:
  bool b(int index) const;
  void set_b(int index, bool value);
  void add_b(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      b() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_b();

  // @@protoc_insertion_point(class_scope:com.mdb.proto.msg.TableCol.bool_list)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > b_;
  mutable std::atomic<int> _b_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mdb_2eproto;
};
// -------------------------------------------------------------------

class TableCol_uint32_list PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.mdb.proto.msg.TableCol.uint32_list) */ {
 public:
  inline TableCol_uint32_list() : TableCol_uint32_list(nullptr) {};
  virtual ~TableCol_uint32_list();

  TableCol_uint32_list(const TableCol_uint32_list& from);
  TableCol_uint32_list(TableCol_uint32_list&& from) noexcept
    : TableCol_uint32_list() {
    *this = ::std::move(from);
  }

  inline TableCol_uint32_list& operator=(const TableCol_uint32_list& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableCol_uint32_list& operator=(TableCol_uint32_list&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TableCol_uint32_list& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TableCol_uint32_list* internal_default_instance() {
    return reinterpret_cast<const TableCol_uint32_list*>(
               &_TableCol_uint32_list_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TableCol_uint32_list& a, TableCol_uint32_list& b) {
    a.Swap(&b);
  }
  inline void Swap(TableCol_uint32_list* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TableCol_uint32_list* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TableCol_uint32_list* New() const final {
    return CreateMaybeMessage<TableCol_uint32_list>(nullptr);
  }

  TableCol_uint32_list* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TableCol_uint32_list>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TableCol_uint32_list& from);
  void MergeFrom(const TableCol_uint32_list& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableCol_uint32_list* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.mdb.proto.msg.TableCol.uint32_list";
  }
  protected:
  explicit TableCol_uint32_list(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mdb_2eproto);
    return ::descriptor_table_mdb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kU32FieldNumber = 1,
  };
  // repeated uint32 u32 = 1;
  int u32_size() const;
  private:
  int _internal_u32_size() const;
  public:
  void clear_u32();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_u32(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_u32() const;
  void _internal_add_u32(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_u32();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 u32(int index) const;
  void set_u32(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_u32(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      u32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_u32();

  // @@protoc_insertion_point(class_scope:com.mdb.proto.msg.TableCol.uint32_list)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > u32_;
  mutable std::atomic<int> _u32_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mdb_2eproto;
};
// -------------------------------------------------------------------

class TableCol_sint32_list PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.mdb.proto.msg.TableCol.sint32_list) */ {
 public:
  inline TableCol_sint32_list() : TableCol_sint32_list(nullptr) {};
  virtual ~TableCol_sint32_list();

  TableCol_sint32_list(const TableCol_sint32_list& from);
  TableCol_sint32_list(TableCol_sint32_list&& from) noexcept
    : TableCol_sint32_list() {
    *this = ::std::move(from);
  }

  inline TableCol_sint32_list& operator=(const TableCol_sint32_list& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableCol_sint32_list& operator=(TableCol_sint32_list&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TableCol_sint32_list& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TableCol_sint32_list* internal_default_instance() {
    return reinterpret_cast<const TableCol_sint32_list*>(
               &_TableCol_sint32_list_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TableCol_sint32_list& a, TableCol_sint32_list& b) {
    a.Swap(&b);
  }
  inline void Swap(TableCol_sint32_list* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TableCol_sint32_list* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TableCol_sint32_list* New() const final {
    return CreateMaybeMessage<TableCol_sint32_list>(nullptr);
  }

  TableCol_sint32_list* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TableCol_sint32_list>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TableCol_sint32_list& from);
  void MergeFrom(const TableCol_sint32_list& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableCol_sint32_list* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.mdb.proto.msg.TableCol.sint32_list";
  }
  protected:
  explicit TableCol_sint32_list(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mdb_2eproto);
    return ::descriptor_table_mdb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kI32FieldNumber = 1,
  };
  // repeated sint32 i32 = 1;
  int i32_size() const;
  private:
  int _internal_i32_size() const;
  public:
  void clear_i32();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_i32(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_i32() const;
  void _internal_add_i32(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_i32();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 i32(int index) const;
  void set_i32(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_i32(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      i32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_i32();

  // @@protoc_insertion_point(class_scope:com.mdb.proto.msg.TableCol.sint32_list)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > i32_;
  mutable std::atomic<int> _i32_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mdb_2eproto;
};
// -------------------------------------------------------------------

class TableCol_uint64_list PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.mdb.proto.msg.TableCol.uint64_list) */ {
 public:
  inline TableCol_uint64_list() : TableCol_uint64_list(nullptr) {};
  virtual ~TableCol_uint64_list();

  TableCol_uint64_list(const TableCol_uint64_list& from);
  TableCol_uint64_list(TableCol_uint64_list&& from) noexcept
    : TableCol_uint64_list() {
    *this = ::std::move(from);
  }

  inline TableCol_uint64_list& operator=(const TableCol_uint64_list& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableCol_uint64_list& operator=(TableCol_uint64_list&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TableCol_uint64_list& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TableCol_uint64_list* internal_default_instance() {
    return reinterpret_cast<const TableCol_uint64_list*>(
               &_TableCol_uint64_list_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TableCol_uint64_list& a, TableCol_uint64_list& b) {
    a.Swap(&b);
  }
  inline void Swap(TableCol_uint64_list* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TableCol_uint64_list* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TableCol_uint64_list* New() const final {
    return CreateMaybeMessage<TableCol_uint64_list>(nullptr);
  }

  TableCol_uint64_list* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TableCol_uint64_list>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TableCol_uint64_list& from);
  void MergeFrom(const TableCol_uint64_list& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableCol_uint64_list* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.mdb.proto.msg.TableCol.uint64_list";
  }
  protected:
  explicit TableCol_uint64_list(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mdb_2eproto);
    return ::descriptor_table_mdb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kU64FieldNumber = 1,
  };
  // repeated uint64 u64 = 1;
  int u64_size() const;
  private:
  int _internal_u64_size() const;
  public:
  void clear_u64();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_u64(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_u64() const;
  void _internal_add_u64(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_u64();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 u64(int index) const;
  void set_u64(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_u64(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      u64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_u64();

  // @@protoc_insertion_point(class_scope:com.mdb.proto.msg.TableCol.uint64_list)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > u64_;
  mutable std::atomic<int> _u64_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mdb_2eproto;
};
// -------------------------------------------------------------------

class TableCol_sint64_list PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.mdb.proto.msg.TableCol.sint64_list) */ {
 public:
  inline TableCol_sint64_list() : TableCol_sint64_list(nullptr) {};
  virtual ~TableCol_sint64_list();

  TableCol_sint64_list(const TableCol_sint64_list& from);
  TableCol_sint64_list(TableCol_sint64_list&& from) noexcept
    : TableCol_sint64_list() {
    *this = ::std::move(from);
  }

  inline TableCol_sint64_list& operator=(const TableCol_sint64_list& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableCol_sint64_list& operator=(TableCol_sint64_list&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TableCol_sint64_list& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TableCol_sint64_list* internal_default_instance() {
    return reinterpret_cast<const TableCol_sint64_list*>(
               &_TableCol_sint64_list_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TableCol_sint64_list& a, TableCol_sint64_list& b) {
    a.Swap(&b);
  }
  inline void Swap(TableCol_sint64_list* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TableCol_sint64_list* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TableCol_sint64_list* New() const final {
    return CreateMaybeMessage<TableCol_sint64_list>(nullptr);
  }

  TableCol_sint64_list* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TableCol_sint64_list>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TableCol_sint64_list& from);
  void MergeFrom(const TableCol_sint64_list& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableCol_sint64_list* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.mdb.proto.msg.TableCol.sint64_list";
  }
  protected:
  explicit TableCol_sint64_list(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mdb_2eproto);
    return ::descriptor_table_mdb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kI64FieldNumber = 1,
  };
  // repeated sint64 i64 = 1;
  int i64_size() const;
  private:
  int _internal_i64_size() const;
  public:
  void clear_i64();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_i64(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_i64() const;
  void _internal_add_i64(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_i64();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 i64(int index) const;
  void set_i64(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_i64(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      i64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_i64();

  // @@protoc_insertion_point(class_scope:com.mdb.proto.msg.TableCol.sint64_list)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > i64_;
  mutable std::atomic<int> _i64_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mdb_2eproto;
};
// -------------------------------------------------------------------

class TableCol_float_list PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.mdb.proto.msg.TableCol.float_list) */ {
 public:
  inline TableCol_float_list() : TableCol_float_list(nullptr) {};
  virtual ~TableCol_float_list();

  TableCol_float_list(const TableCol_float_list& from);
  TableCol_float_list(TableCol_float_list&& from) noexcept
    : TableCol_float_list() {
    *this = ::std::move(from);
  }

  inline TableCol_float_list& operator=(const TableCol_float_list& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableCol_float_list& operator=(TableCol_float_list&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TableCol_float_list& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TableCol_float_list* internal_default_instance() {
    return reinterpret_cast<const TableCol_float_list*>(
               &_TableCol_float_list_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(TableCol_float_list& a, TableCol_float_list& b) {
    a.Swap(&b);
  }
  inline void Swap(TableCol_float_list* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TableCol_float_list* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TableCol_float_list* New() const final {
    return CreateMaybeMessage<TableCol_float_list>(nullptr);
  }

  TableCol_float_list* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TableCol_float_list>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TableCol_float_list& from);
  void MergeFrom(const TableCol_float_list& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableCol_float_list* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.mdb.proto.msg.TableCol.float_list";
  }
  protected:
  explicit TableCol_float_list(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mdb_2eproto);
    return ::descriptor_table_mdb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF32FieldNumber = 1,
  };
  // repeated float f32 = 1;
  int f32_size() const;
  private:
  int _internal_f32_size() const;
  public:
  void clear_f32();
  private:
  float _internal_f32(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_f32() const;
  void _internal_add_f32(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_f32();
  public:
  float f32(int index) const;
  void set_f32(int index, float value);
  void add_f32(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      f32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_f32();

  // @@protoc_insertion_point(class_scope:com.mdb.proto.msg.TableCol.float_list)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > f32_;
  mutable std::atomic<int> _f32_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mdb_2eproto;
};
// -------------------------------------------------------------------

class TableCol_double_list PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.mdb.proto.msg.TableCol.double_list) */ {
 public:
  inline TableCol_double_list() : TableCol_double_list(nullptr) {};
  virtual ~TableCol_double_list();

  TableCol_double_list(const TableCol_double_list& from);
  TableCol_double_list(TableCol_double_list&& from) noexcept
    : TableCol_double_list() {
    *this = ::std::move(from);
  }

  inline TableCol_double_list& operator=(const TableCol_double_list& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableCol_double_list& operator=(TableCol_double_list&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TableCol_double_list& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TableCol_double_list* internal_default_instance() {
    return reinterpret_cast<const TableCol_double_list*>(
               &_TableCol_double_list_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(TableCol_double_list& a, TableCol_double_list& b) {
    a.Swap(&b);
  }
  inline void Swap(TableCol_double_list* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TableCol_double_list* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TableCol_double_list* New() const final {
    return CreateMaybeMessage<TableCol_double_list>(nullptr);
  }

  TableCol_double_list* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TableCol_double_list>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TableCol_double_list& from);
  void MergeFrom(const TableCol_double_list& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableCol_double_list* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.mdb.proto.msg.TableCol.double_list";
  }
  protected:
  explicit TableCol_double_list(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mdb_2eproto);
    return ::descriptor_table_mdb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF64FieldNumber = 1,
  };
  // repeated double f64 = 1;
  int f64_size() const;
  private:
  int _internal_f64_size() const;
  public:
  void clear_f64();
  private:
  double _internal_f64(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_f64() const;
  void _internal_add_f64(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_f64();
  public:
  double f64(int index) const;
  void set_f64(int index, double value);
  void add_f64(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      f64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_f64();

  // @@protoc_insertion_point(class_scope:com.mdb.proto.msg.TableCol.double_list)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > f64_;
  mutable std::atomic<int> _f64_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mdb_2eproto;
};
// -------------------------------------------------------------------

class TableCol_string_list PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.mdb.proto.msg.TableCol.string_list) */ {
 public:
  inline TableCol_string_list() : TableCol_string_list(nullptr) {};
  virtual ~TableCol_string_list();

  TableCol_string_list(const TableCol_string_list& from);
  TableCol_string_list(TableCol_string_list&& from) noexcept
    : TableCol_string_list() {
    *this = ::std::move(from);
  }

  inline TableCol_string_list& operator=(const TableCol_string_list& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableCol_string_list& operator=(TableCol_string_list&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TableCol_string_list& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TableCol_string_list* internal_default_instance() {
    return reinterpret_cast<const TableCol_string_list*>(
               &_TableCol_string_list_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(TableCol_string_list& a, TableCol_string_list& b) {
    a.Swap(&b);
  }
  inline void Swap(TableCol_string_list* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TableCol_string_list* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TableCol_string_list* New() const final {
    return CreateMaybeMessage<TableCol_string_list>(nullptr);
  }

  TableCol_string_list* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TableCol_string_list>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TableCol_string_list& from);
  void MergeFrom(const TableCol_string_list& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableCol_string_list* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.mdb.proto.msg.TableCol.string_list";
  }
  protected:
  explicit TableCol_string_list(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mdb_2eproto);
    return ::descriptor_table_mdb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrFieldNumber = 1,
  };
  // repeated string str = 1;
  int str_size() const;
  private:
  int _internal_str_size() const;
  public:
  void clear_str();
  const std::string& str(int index) const;
  std::string* mutable_str(int index);
  void set_str(int index, const std::string& value);
  void set_str(int index, std::string&& value);
  void set_str(int index, const char* value);
  void set_str(int index, const char* value, size_t size);
  std::string* add_str();
  void add_str(const std::string& value);
  void add_str(std::string&& value);
  void add_str(const char* value);
  void add_str(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& str() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_str();
  private:
  const std::string& _internal_str(int index) const;
  std::string* _internal_add_str();
  public:

  // @@protoc_insertion_point(class_scope:com.mdb.proto.msg.TableCol.string_list)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> str_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mdb_2eproto;
};
// -------------------------------------------------------------------

class TableCol_data_list PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.mdb.proto.msg.TableCol.data_list) */ {
 public:
  inline TableCol_data_list() : TableCol_data_list(nullptr) {};
  virtual ~TableCol_data_list();

  TableCol_data_list(const TableCol_data_list& from);
  TableCol_data_list(TableCol_data_list&& from) noexcept
    : TableCol_data_list() {
    *this = ::std::move(from);
  }

  inline TableCol_data_list& operator=(const TableCol_data_list& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableCol_data_list& operator=(TableCol_data_list&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TableCol_data_list& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TableCol_data_list* internal_default_instance() {
    return reinterpret_cast<const TableCol_data_list*>(
               &_TableCol_data_list_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(TableCol_data_list& a, TableCol_data_list& b) {
    a.Swap(&b);
  }
  inline void Swap(TableCol_data_list* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TableCol_data_list* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TableCol_data_list* New() const final {
    return CreateMaybeMessage<TableCol_data_list>(nullptr);
  }

  TableCol_data_list* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TableCol_data_list>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TableCol_data_list& from);
  void MergeFrom(const TableCol_data_list& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableCol_data_list* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.mdb.proto.msg.TableCol.data_list";
  }
  protected:
  explicit TableCol_data_list(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mdb_2eproto);
    return ::descriptor_table_mdb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated bytes data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  const std::string& data(int index) const;
  std::string* mutable_data(int index);
  void set_data(int index, const std::string& value);
  void set_data(int index, std::string&& value);
  void set_data(int index, const char* value);
  void set_data(int index, const void* value, size_t size);
  std::string* add_data();
  void add_data(const std::string& value);
  void add_data(std::string&& value);
  void add_data(const char* value);
  void add_data(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_data();
  private:
  const std::string& _internal_data(int index) const;
  std::string* _internal_add_data();
  public:

  // @@protoc_insertion_point(class_scope:com.mdb.proto.msg.TableCol.data_list)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mdb_2eproto;
};
// -------------------------------------------------------------------

class TableCol PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.mdb.proto.msg.TableCol) */ {
 public:
  inline TableCol() : TableCol(nullptr) {};
  virtual ~TableCol();

  TableCol(const TableCol& from);
  TableCol(TableCol&& from) noexcept
    : TableCol() {
    *this = ::std::move(from);
  }

  inline TableCol& operator=(const TableCol& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableCol& operator=(TableCol&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TableCol& default_instance();

  enum VarlistCase {
    kB = 1,
    kU32 = 2,
    kI32 = 3,
    kU64 = 4,
    kI64 = 5,
    kF32 = 6,
    kF64 = 7,
    kStr = 8,
    kData = 9,
    VARLIST_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TableCol* internal_default_instance() {
    return reinterpret_cast<const TableCol*>(
               &_TableCol_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(TableCol& a, TableCol& b) {
    a.Swap(&b);
  }
  inline void Swap(TableCol* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TableCol* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TableCol* New() const final {
    return CreateMaybeMessage<TableCol>(nullptr);
  }

  TableCol* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TableCol>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TableCol& from);
  void MergeFrom(const TableCol& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableCol* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.mdb.proto.msg.TableCol";
  }
  protected:
  explicit TableCol(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mdb_2eproto);
    return ::descriptor_table_mdb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TableCol_bool_list bool_list;
  typedef TableCol_uint32_list uint32_list;
  typedef TableCol_sint32_list sint32_list;
  typedef TableCol_uint64_list uint64_list;
  typedef TableCol_sint64_list sint64_list;
  typedef TableCol_float_list float_list;
  typedef TableCol_double_list double_list;
  typedef TableCol_string_list string_list;
  typedef TableCol_data_list data_list;

  // accessors -------------------------------------------------------

  enum : int {
    kBFieldNumber = 1,
    kU32FieldNumber = 2,
    kI32FieldNumber = 3,
    kU64FieldNumber = 4,
    kI64FieldNumber = 5,
    kF32FieldNumber = 6,
    kF64FieldNumber = 7,
    kStrFieldNumber = 8,
    kDataFieldNumber = 9,
  };
  // .com.mdb.proto.msg.TableCol.bool_list b = 1;
  bool has_b() const;
  private:
  bool _internal_has_b() const;
  public:
  void clear_b();
  const ::com::mdb::proto::msg::TableCol_bool_list& b() const;
  ::com::mdb::proto::msg::TableCol_bool_list* release_b();
  ::com::mdb::proto::msg::TableCol_bool_list* mutable_b();
  void set_allocated_b(::com::mdb::proto::msg::TableCol_bool_list* b);
  private:
  const ::com::mdb::proto::msg::TableCol_bool_list& _internal_b() const;
  ::com::mdb::proto::msg::TableCol_bool_list* _internal_mutable_b();
  public:
  void unsafe_arena_set_allocated_b(
      ::com::mdb::proto::msg::TableCol_bool_list* b);
  ::com::mdb::proto::msg::TableCol_bool_list* unsafe_arena_release_b();

  // .com.mdb.proto.msg.TableCol.uint32_list u32 = 2;
  bool has_u32() const;
  private:
  bool _internal_has_u32() const;
  public:
  void clear_u32();
  const ::com::mdb::proto::msg::TableCol_uint32_list& u32() const;
  ::com::mdb::proto::msg::TableCol_uint32_list* release_u32();
  ::com::mdb::proto::msg::TableCol_uint32_list* mutable_u32();
  void set_allocated_u32(::com::mdb::proto::msg::TableCol_uint32_list* u32);
  private:
  const ::com::mdb::proto::msg::TableCol_uint32_list& _internal_u32() const;
  ::com::mdb::proto::msg::TableCol_uint32_list* _internal_mutable_u32();
  public:
  void unsafe_arena_set_allocated_u32(
      ::com::mdb::proto::msg::TableCol_uint32_list* u32);
  ::com::mdb::proto::msg::TableCol_uint32_list* unsafe_arena_release_u32();

  // .com.mdb.proto.msg.TableCol.sint32_list i32 = 3;
  bool has_i32() const;
  private:
  bool _internal_has_i32() const;
  public:
  void clear_i32();
  const ::com::mdb::proto::msg::TableCol_sint32_list& i32() const;
  ::com::mdb::proto::msg::TableCol_sint32_list* release_i32();
  ::com::mdb::proto::msg::TableCol_sint32_list* mutable_i32();
  void set_allocated_i32(::com::mdb::proto::msg::TableCol_sint32_list* i32);
  private:
  const ::com::mdb::proto::msg::TableCol_sint32_list& _internal_i32() const;
  ::com::mdb::proto::msg::TableCol_sint32_list* _internal_mutable_i32();
  public:
  void unsafe_arena_set_allocated_i32(
      ::com::mdb::proto::msg::TableCol_sint32_list* i32);
  ::com::mdb::proto::msg::TableCol_sint32_list* unsafe_arena_release_i32();

  // .com.mdb.proto.msg.TableCol.uint64_list u64 = 4;
  bool has_u64() const;
  private:
  bool _internal_has_u64() const;
  public:
  void clear_u64();
  const ::com::mdb::proto::msg::TableCol_uint64_list& u64() const;
  ::com::mdb::proto::msg::TableCol_uint64_list* release_u64();
  ::com::mdb::proto::msg::TableCol_uint64_list* mutable_u64();
  void set_allocated_u64(::com::mdb::proto::msg::TableCol_uint64_list* u64);
  private:
  const ::com::mdb::proto::msg::TableCol_uint64_list& _internal_u64() const;
  ::com::mdb::proto::msg::TableCol_uint64_list* _internal_mutable_u64();
  public:
  void unsafe_arena_set_allocated_u64(
      ::com::mdb::proto::msg::TableCol_uint64_list* u64);
  ::com::mdb::proto::msg::TableCol_uint64_list* unsafe_arena_release_u64();

  // .com.mdb.proto.msg.TableCol.sint64_list i64 = 5;
  bool has_i64() const;
  private:
  bool _internal_has_i64() const;
  public:
  void clear_i64();
  const ::com::mdb::proto::msg::TableCol_sint64_list& i64() const;
  ::com::mdb::proto::msg::TableCol_sint64_list* release_i64();
  ::com::mdb::proto::msg::TableCol_sint64_list* mutable_i64();
  void set_allocated_i64(::com::mdb::proto::msg::TableCol_sint64_list* i64);
  private:
  const ::com::mdb::proto::msg::TableCol_sint64_list& _internal_i64() const;
  ::com::mdb::proto::msg::TableCol_sint64_list* _internal_mutable_i64();
  public:
  void unsafe_arena_set_allocated_i64(
      ::com::mdb::proto::msg::TableCol_sint64_list* i64);
  ::com::mdb::proto::msg::TableCol_sint64_list* unsafe_arena_release_i64();

  // .com.mdb.proto.msg.TableCol.float_list f32 = 6;
  bool has_f32() const;
  private:
  bool _internal_has_f32() const;
  public:
  void clear_f32();
  const ::com::mdb::proto::msg::TableCol_float_list& f32() const;
  ::com::mdb::proto::msg::TableCol_float_list* release_f32();
  ::com::mdb::proto::msg::TableCol_float_list* mutable_f32();
  void set_allocated_f32(::com::mdb::proto::msg::TableCol_float_list* f32);
  private:
  const ::com::mdb::proto::msg::TableCol_float_list& _internal_f32() const;
  ::com::mdb::proto::msg::TableCol_float_list* _internal_mutable_f32();
  public:
  void unsafe_arena_set_allocated_f32(
      ::com::mdb::proto::msg::TableCol_float_list* f32);
  ::com::mdb::proto::msg::TableCol_float_list* unsafe_arena_release_f32();

  // .com.mdb.proto.msg.TableCol.double_list f64 = 7;
  bool has_f64() const;
  private:
  bool _internal_has_f64() const;
  public:
  void clear_f64();
  const ::com::mdb::proto::msg::TableCol_double_list& f64() const;
  ::com::mdb::proto::msg::TableCol_double_list* release_f64();
  ::com::mdb::proto::msg::TableCol_double_list* mutable_f64();
  void set_allocated_f64(::com::mdb::proto::msg::TableCol_double_list* f64);
  private:
  const ::com::mdb::proto::msg::TableCol_double_list& _internal_f64() const;
  ::com::mdb::proto::msg::TableCol_double_list* _internal_mutable_f64();
  public:
  void unsafe_arena_set_allocated_f64(
      ::com::mdb::proto::msg::TableCol_double_list* f64);
  ::com::mdb::proto::msg::TableCol_double_list* unsafe_arena_release_f64();

  // .com.mdb.proto.msg.TableCol.string_list str = 8;
  bool has_str() const;
  private:
  bool _internal_has_str() const;
  public:
  void clear_str();
  const ::com::mdb::proto::msg::TableCol_string_list& str() const;
  ::com::mdb::proto::msg::TableCol_string_list* release_str();
  ::com::mdb::proto::msg::TableCol_string_list* mutable_str();
  void set_allocated_str(::com::mdb::proto::msg::TableCol_string_list* str);
  private:
  const ::com::mdb::proto::msg::TableCol_string_list& _internal_str() const;
  ::com::mdb::proto::msg::TableCol_string_list* _internal_mutable_str();
  public:
  void unsafe_arena_set_allocated_str(
      ::com::mdb::proto::msg::TableCol_string_list* str);
  ::com::mdb::proto::msg::TableCol_string_list* unsafe_arena_release_str();

  // .com.mdb.proto.msg.TableCol.data_list data = 9;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::com::mdb::proto::msg::TableCol_data_list& data() const;
  ::com::mdb::proto::msg::TableCol_data_list* release_data();
  ::com::mdb::proto::msg::TableCol_data_list* mutable_data();
  void set_allocated_data(::com::mdb::proto::msg::TableCol_data_list* data);
  private:
  const ::com::mdb::proto::msg::TableCol_data_list& _internal_data() const;
  ::com::mdb::proto::msg::TableCol_data_list* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::com::mdb::proto::msg::TableCol_data_list* data);
  ::com::mdb::proto::msg::TableCol_data_list* unsafe_arena_release_data();

  void clear_varlist();
  VarlistCase varlist_case() const;
  // @@protoc_insertion_point(class_scope:com.mdb.proto.msg.TableCol)
 private:
  class _Internal;
  void set_has_b();
  void set_has_u32();
  void set_has_i32();
  void set_has_u64();
  void set_has_i64();
  void set_has_f32();
  void set_has_f64();
  void set_has_str();
  void set_has_data();

  inline bool has_varlist() const;
  inline void clear_has_varlist();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union VarlistUnion {
    VarlistUnion() {}
    ::com::mdb::proto::msg::TableCol_bool_list* b_;
    ::com::mdb::proto::msg::TableCol_uint32_list* u32_;
    ::com::mdb::proto::msg::TableCol_sint32_list* i32_;
    ::com::mdb::proto::msg::TableCol_uint64_list* u64_;
    ::com::mdb::proto::msg::TableCol_sint64_list* i64_;
    ::com::mdb::proto::msg::TableCol_float_list* f32_;
    ::com::mdb::proto::msg::TableCol_double_list* f64_;
    ::com::mdb::proto::msg::TableCol_string_list* str_;
    ::com::mdb::proto::msg::TableCol_data_list* data_;
  } varlist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_mdb_2eproto;
};
// -------------------------------------------------------------------

class StdTableData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.mdb.proto.msg.StdTableData) */ {
 public:
  inline StdTableData() : StdTableData(nullptr) {};
  virtual ~StdTableData();

  StdTableData(const StdTableData& from);
  StdTableData(StdTableData&& from) noexcept
    : StdTableData() {
    *this = ::std::move(from);
  }

  inline StdTableData& operator=(const StdTableData& from) {
    CopyFrom(from);
    return *this;
  }
  inline StdTableData& operator=(StdTableData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StdTableData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StdTableData* internal_default_instance() {
    return reinterpret_cast<const StdTableData*>(
               &_StdTableData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(StdTableData& a, StdTableData& b) {
    a.Swap(&b);
  }
  inline void Swap(StdTableData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StdTableData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StdTableData* New() const final {
    return CreateMaybeMessage<StdTableData>(nullptr);
  }

  StdTableData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StdTableData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StdTableData& from);
  void MergeFrom(const StdTableData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StdTableData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.mdb.proto.msg.StdTableData";
  }
  protected:
  explicit StdTableData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mdb_2eproto);
    return ::descriptor_table_mdb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 1,
  };
  // repeated .com.mdb.proto.msg.TableCol list = 1;
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  ::com::mdb::proto::msg::TableCol* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::mdb::proto::msg::TableCol >*
      mutable_list();
  private:
  const ::com::mdb::proto::msg::TableCol& _internal_list(int index) const;
  ::com::mdb::proto::msg::TableCol* _internal_add_list();
  public:
  const ::com::mdb::proto::msg::TableCol& list(int index) const;
  ::com::mdb::proto::msg::TableCol* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::mdb::proto::msg::TableCol >&
      list() const;

  // @@protoc_insertion_point(class_scope:com.mdb.proto.msg.StdTableData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::mdb::proto::msg::TableCol > list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mdb_2eproto;
};
// -------------------------------------------------------------------

class Table PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.mdb.proto.msg.Table) */ {
 public:
  inline Table() : Table(nullptr) {};
  virtual ~Table();

  Table(const Table& from);
  Table(Table&& from) noexcept
    : Table() {
    *this = ::std::move(from);
  }

  inline Table& operator=(const Table& from) {
    CopyFrom(from);
    return *this;
  }
  inline Table& operator=(Table&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Table& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Table* internal_default_instance() {
    return reinterpret_cast<const Table*>(
               &_Table_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Table& a, Table& b) {
    a.Swap(&b);
  }
  inline void Swap(Table* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Table* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Table* New() const final {
    return CreateMaybeMessage<Table>(nullptr);
  }

  Table* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Table>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Table& from);
  void MergeFrom(const Table& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Table* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.mdb.proto.msg.Table";
  }
  protected:
  explicit Table(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mdb_2eproto);
    return ::descriptor_table_mdb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttrFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // bytes attr = 1;
  void clear_attr();
  const std::string& attr() const;
  void set_attr(const std::string& value);
  void set_attr(std::string&& value);
  void set_attr(const char* value);
  void set_attr(const void* value, size_t size);
  std::string* mutable_attr();
  std::string* release_attr();
  void set_allocated_attr(std::string* attr);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_attr();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_attr(
      std::string* attr);
  private:
  const std::string& _internal_attr() const;
  void _internal_set_attr(const std::string& value);
  std::string* _internal_mutable_attr();
  public:

  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:com.mdb.proto.msg.Table)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mdb_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TableField

// uint64 id = 1;
inline void TableField::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TableField::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TableField::id() const {
  // @@protoc_insertion_point(field_get:com.mdb.proto.msg.TableField.id)
  return _internal_id();
}
inline void TableField::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void TableField::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:com.mdb.proto.msg.TableField.id)
}

// uint32 type = 2;
inline void TableField::clear_type() {
  type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TableField::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TableField::type() const {
  // @@protoc_insertion_point(field_get:com.mdb.proto.msg.TableField.type)
  return _internal_type();
}
inline void TableField::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_ = value;
}
inline void TableField::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:com.mdb.proto.msg.TableField.type)
}

// uint32 size = 3;
inline void TableField::clear_size() {
  size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TableField::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TableField::size() const {
  // @@protoc_insertion_point(field_get:com.mdb.proto.msg.TableField.size)
  return _internal_size();
}
inline void TableField::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  size_ = value;
}
inline void TableField::set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:com.mdb.proto.msg.TableField.size)
}

// -------------------------------------------------------------------

// StdTableAttr

// repeated .com.mdb.proto.msg.TableField field = 1;
inline int StdTableAttr::_internal_field_size() const {
  return field_.size();
}
inline int StdTableAttr::field_size() const {
  return _internal_field_size();
}
inline void StdTableAttr::clear_field() {
  field_.Clear();
}
inline ::com::mdb::proto::msg::TableField* StdTableAttr::mutable_field(int index) {
  // @@protoc_insertion_point(field_mutable:com.mdb.proto.msg.StdTableAttr.field)
  return field_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::mdb::proto::msg::TableField >*
StdTableAttr::mutable_field() {
  // @@protoc_insertion_point(field_mutable_list:com.mdb.proto.msg.StdTableAttr.field)
  return &field_;
}
inline const ::com::mdb::proto::msg::TableField& StdTableAttr::_internal_field(int index) const {
  return field_.Get(index);
}
inline const ::com::mdb::proto::msg::TableField& StdTableAttr::field(int index) const {
  // @@protoc_insertion_point(field_get:com.mdb.proto.msg.StdTableAttr.field)
  return _internal_field(index);
}
inline ::com::mdb::proto::msg::TableField* StdTableAttr::_internal_add_field() {
  return field_.Add();
}
inline ::com::mdb::proto::msg::TableField* StdTableAttr::add_field() {
  // @@protoc_insertion_point(field_add:com.mdb.proto.msg.StdTableAttr.field)
  return _internal_add_field();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::mdb::proto::msg::TableField >&
StdTableAttr::field() const {
  // @@protoc_insertion_point(field_list:com.mdb.proto.msg.StdTableAttr.field)
  return field_;
}

// -------------------------------------------------------------------

// TableCol_bool_list

// repeated bool b = 1;
inline int TableCol_bool_list::_internal_b_size() const {
  return b_.size();
}
inline int TableCol_bool_list::b_size() const {
  return _internal_b_size();
}
inline void TableCol_bool_list::clear_b() {
  b_.Clear();
}
inline bool TableCol_bool_list::_internal_b(int index) const {
  return b_.Get(index);
}
inline bool TableCol_bool_list::b(int index) const {
  // @@protoc_insertion_point(field_get:com.mdb.proto.msg.TableCol.bool_list.b)
  return _internal_b(index);
}
inline void TableCol_bool_list::set_b(int index, bool value) {
  b_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.mdb.proto.msg.TableCol.bool_list.b)
}
inline void TableCol_bool_list::_internal_add_b(bool value) {
  b_.Add(value);
}
inline void TableCol_bool_list::add_b(bool value) {
  _internal_add_b(value);
  // @@protoc_insertion_point(field_add:com.mdb.proto.msg.TableCol.bool_list.b)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
TableCol_bool_list::_internal_b() const {
  return b_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
TableCol_bool_list::b() const {
  // @@protoc_insertion_point(field_list:com.mdb.proto.msg.TableCol.bool_list.b)
  return _internal_b();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
TableCol_bool_list::_internal_mutable_b() {
  return &b_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
TableCol_bool_list::mutable_b() {
  // @@protoc_insertion_point(field_mutable_list:com.mdb.proto.msg.TableCol.bool_list.b)
  return _internal_mutable_b();
}

// -------------------------------------------------------------------

// TableCol_uint32_list

// repeated uint32 u32 = 1;
inline int TableCol_uint32_list::_internal_u32_size() const {
  return u32_.size();
}
inline int TableCol_uint32_list::u32_size() const {
  return _internal_u32_size();
}
inline void TableCol_uint32_list::clear_u32() {
  u32_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TableCol_uint32_list::_internal_u32(int index) const {
  return u32_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TableCol_uint32_list::u32(int index) const {
  // @@protoc_insertion_point(field_get:com.mdb.proto.msg.TableCol.uint32_list.u32)
  return _internal_u32(index);
}
inline void TableCol_uint32_list::set_u32(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  u32_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.mdb.proto.msg.TableCol.uint32_list.u32)
}
inline void TableCol_uint32_list::_internal_add_u32(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  u32_.Add(value);
}
inline void TableCol_uint32_list::add_u32(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_u32(value);
  // @@protoc_insertion_point(field_add:com.mdb.proto.msg.TableCol.uint32_list.u32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
TableCol_uint32_list::_internal_u32() const {
  return u32_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
TableCol_uint32_list::u32() const {
  // @@protoc_insertion_point(field_list:com.mdb.proto.msg.TableCol.uint32_list.u32)
  return _internal_u32();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
TableCol_uint32_list::_internal_mutable_u32() {
  return &u32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
TableCol_uint32_list::mutable_u32() {
  // @@protoc_insertion_point(field_mutable_list:com.mdb.proto.msg.TableCol.uint32_list.u32)
  return _internal_mutable_u32();
}

// -------------------------------------------------------------------

// TableCol_sint32_list

// repeated sint32 i32 = 1;
inline int TableCol_sint32_list::_internal_i32_size() const {
  return i32_.size();
}
inline int TableCol_sint32_list::i32_size() const {
  return _internal_i32_size();
}
inline void TableCol_sint32_list::clear_i32() {
  i32_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TableCol_sint32_list::_internal_i32(int index) const {
  return i32_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TableCol_sint32_list::i32(int index) const {
  // @@protoc_insertion_point(field_get:com.mdb.proto.msg.TableCol.sint32_list.i32)
  return _internal_i32(index);
}
inline void TableCol_sint32_list::set_i32(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  i32_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.mdb.proto.msg.TableCol.sint32_list.i32)
}
inline void TableCol_sint32_list::_internal_add_i32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  i32_.Add(value);
}
inline void TableCol_sint32_list::add_i32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_i32(value);
  // @@protoc_insertion_point(field_add:com.mdb.proto.msg.TableCol.sint32_list.i32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TableCol_sint32_list::_internal_i32() const {
  return i32_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TableCol_sint32_list::i32() const {
  // @@protoc_insertion_point(field_list:com.mdb.proto.msg.TableCol.sint32_list.i32)
  return _internal_i32();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TableCol_sint32_list::_internal_mutable_i32() {
  return &i32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TableCol_sint32_list::mutable_i32() {
  // @@protoc_insertion_point(field_mutable_list:com.mdb.proto.msg.TableCol.sint32_list.i32)
  return _internal_mutable_i32();
}

// -------------------------------------------------------------------

// TableCol_uint64_list

// repeated uint64 u64 = 1;
inline int TableCol_uint64_list::_internal_u64_size() const {
  return u64_.size();
}
inline int TableCol_uint64_list::u64_size() const {
  return _internal_u64_size();
}
inline void TableCol_uint64_list::clear_u64() {
  u64_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TableCol_uint64_list::_internal_u64(int index) const {
  return u64_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TableCol_uint64_list::u64(int index) const {
  // @@protoc_insertion_point(field_get:com.mdb.proto.msg.TableCol.uint64_list.u64)
  return _internal_u64(index);
}
inline void TableCol_uint64_list::set_u64(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  u64_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.mdb.proto.msg.TableCol.uint64_list.u64)
}
inline void TableCol_uint64_list::_internal_add_u64(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  u64_.Add(value);
}
inline void TableCol_uint64_list::add_u64(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_u64(value);
  // @@protoc_insertion_point(field_add:com.mdb.proto.msg.TableCol.uint64_list.u64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
TableCol_uint64_list::_internal_u64() const {
  return u64_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
TableCol_uint64_list::u64() const {
  // @@protoc_insertion_point(field_list:com.mdb.proto.msg.TableCol.uint64_list.u64)
  return _internal_u64();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
TableCol_uint64_list::_internal_mutable_u64() {
  return &u64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
TableCol_uint64_list::mutable_u64() {
  // @@protoc_insertion_point(field_mutable_list:com.mdb.proto.msg.TableCol.uint64_list.u64)
  return _internal_mutable_u64();
}

// -------------------------------------------------------------------

// TableCol_sint64_list

// repeated sint64 i64 = 1;
inline int TableCol_sint64_list::_internal_i64_size() const {
  return i64_.size();
}
inline int TableCol_sint64_list::i64_size() const {
  return _internal_i64_size();
}
inline void TableCol_sint64_list::clear_i64() {
  i64_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TableCol_sint64_list::_internal_i64(int index) const {
  return i64_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TableCol_sint64_list::i64(int index) const {
  // @@protoc_insertion_point(field_get:com.mdb.proto.msg.TableCol.sint64_list.i64)
  return _internal_i64(index);
}
inline void TableCol_sint64_list::set_i64(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  i64_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.mdb.proto.msg.TableCol.sint64_list.i64)
}
inline void TableCol_sint64_list::_internal_add_i64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  i64_.Add(value);
}
inline void TableCol_sint64_list::add_i64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_i64(value);
  // @@protoc_insertion_point(field_add:com.mdb.proto.msg.TableCol.sint64_list.i64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
TableCol_sint64_list::_internal_i64() const {
  return i64_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
TableCol_sint64_list::i64() const {
  // @@protoc_insertion_point(field_list:com.mdb.proto.msg.TableCol.sint64_list.i64)
  return _internal_i64();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
TableCol_sint64_list::_internal_mutable_i64() {
  return &i64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
TableCol_sint64_list::mutable_i64() {
  // @@protoc_insertion_point(field_mutable_list:com.mdb.proto.msg.TableCol.sint64_list.i64)
  return _internal_mutable_i64();
}

// -------------------------------------------------------------------

// TableCol_float_list

// repeated float f32 = 1;
inline int TableCol_float_list::_internal_f32_size() const {
  return f32_.size();
}
inline int TableCol_float_list::f32_size() const {
  return _internal_f32_size();
}
inline void TableCol_float_list::clear_f32() {
  f32_.Clear();
}
inline float TableCol_float_list::_internal_f32(int index) const {
  return f32_.Get(index);
}
inline float TableCol_float_list::f32(int index) const {
  // @@protoc_insertion_point(field_get:com.mdb.proto.msg.TableCol.float_list.f32)
  return _internal_f32(index);
}
inline void TableCol_float_list::set_f32(int index, float value) {
  f32_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.mdb.proto.msg.TableCol.float_list.f32)
}
inline void TableCol_float_list::_internal_add_f32(float value) {
  f32_.Add(value);
}
inline void TableCol_float_list::add_f32(float value) {
  _internal_add_f32(value);
  // @@protoc_insertion_point(field_add:com.mdb.proto.msg.TableCol.float_list.f32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TableCol_float_list::_internal_f32() const {
  return f32_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TableCol_float_list::f32() const {
  // @@protoc_insertion_point(field_list:com.mdb.proto.msg.TableCol.float_list.f32)
  return _internal_f32();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TableCol_float_list::_internal_mutable_f32() {
  return &f32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TableCol_float_list::mutable_f32() {
  // @@protoc_insertion_point(field_mutable_list:com.mdb.proto.msg.TableCol.float_list.f32)
  return _internal_mutable_f32();
}

// -------------------------------------------------------------------

// TableCol_double_list

// repeated double f64 = 1;
inline int TableCol_double_list::_internal_f64_size() const {
  return f64_.size();
}
inline int TableCol_double_list::f64_size() const {
  return _internal_f64_size();
}
inline void TableCol_double_list::clear_f64() {
  f64_.Clear();
}
inline double TableCol_double_list::_internal_f64(int index) const {
  return f64_.Get(index);
}
inline double TableCol_double_list::f64(int index) const {
  // @@protoc_insertion_point(field_get:com.mdb.proto.msg.TableCol.double_list.f64)
  return _internal_f64(index);
}
inline void TableCol_double_list::set_f64(int index, double value) {
  f64_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.mdb.proto.msg.TableCol.double_list.f64)
}
inline void TableCol_double_list::_internal_add_f64(double value) {
  f64_.Add(value);
}
inline void TableCol_double_list::add_f64(double value) {
  _internal_add_f64(value);
  // @@protoc_insertion_point(field_add:com.mdb.proto.msg.TableCol.double_list.f64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
TableCol_double_list::_internal_f64() const {
  return f64_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
TableCol_double_list::f64() const {
  // @@protoc_insertion_point(field_list:com.mdb.proto.msg.TableCol.double_list.f64)
  return _internal_f64();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
TableCol_double_list::_internal_mutable_f64() {
  return &f64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
TableCol_double_list::mutable_f64() {
  // @@protoc_insertion_point(field_mutable_list:com.mdb.proto.msg.TableCol.double_list.f64)
  return _internal_mutable_f64();
}

// -------------------------------------------------------------------

// TableCol_string_list

// repeated string str = 1;
inline int TableCol_string_list::_internal_str_size() const {
  return str_.size();
}
inline int TableCol_string_list::str_size() const {
  return _internal_str_size();
}
inline void TableCol_string_list::clear_str() {
  str_.Clear();
}
inline std::string* TableCol_string_list::add_str() {
  // @@protoc_insertion_point(field_add_mutable:com.mdb.proto.msg.TableCol.string_list.str)
  return _internal_add_str();
}
inline const std::string& TableCol_string_list::_internal_str(int index) const {
  return str_.Get(index);
}
inline const std::string& TableCol_string_list::str(int index) const {
  // @@protoc_insertion_point(field_get:com.mdb.proto.msg.TableCol.string_list.str)
  return _internal_str(index);
}
inline std::string* TableCol_string_list::mutable_str(int index) {
  // @@protoc_insertion_point(field_mutable:com.mdb.proto.msg.TableCol.string_list.str)
  return str_.Mutable(index);
}
inline void TableCol_string_list::set_str(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:com.mdb.proto.msg.TableCol.string_list.str)
  str_.Mutable(index)->assign(value);
}
inline void TableCol_string_list::set_str(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:com.mdb.proto.msg.TableCol.string_list.str)
  str_.Mutable(index)->assign(std::move(value));
}
inline void TableCol_string_list::set_str(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  str_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.mdb.proto.msg.TableCol.string_list.str)
}
inline void TableCol_string_list::set_str(int index, const char* value, size_t size) {
  str_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.mdb.proto.msg.TableCol.string_list.str)
}
inline std::string* TableCol_string_list::_internal_add_str() {
  return str_.Add();
}
inline void TableCol_string_list::add_str(const std::string& value) {
  str_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.mdb.proto.msg.TableCol.string_list.str)
}
inline void TableCol_string_list::add_str(std::string&& value) {
  str_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:com.mdb.proto.msg.TableCol.string_list.str)
}
inline void TableCol_string_list::add_str(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  str_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.mdb.proto.msg.TableCol.string_list.str)
}
inline void TableCol_string_list::add_str(const char* value, size_t size) {
  str_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.mdb.proto.msg.TableCol.string_list.str)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TableCol_string_list::str() const {
  // @@protoc_insertion_point(field_list:com.mdb.proto.msg.TableCol.string_list.str)
  return str_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TableCol_string_list::mutable_str() {
  // @@protoc_insertion_point(field_mutable_list:com.mdb.proto.msg.TableCol.string_list.str)
  return &str_;
}

// -------------------------------------------------------------------

// TableCol_data_list

// repeated bytes data = 1;
inline int TableCol_data_list::_internal_data_size() const {
  return data_.size();
}
inline int TableCol_data_list::data_size() const {
  return _internal_data_size();
}
inline void TableCol_data_list::clear_data() {
  data_.Clear();
}
inline std::string* TableCol_data_list::add_data() {
  // @@protoc_insertion_point(field_add_mutable:com.mdb.proto.msg.TableCol.data_list.data)
  return _internal_add_data();
}
inline const std::string& TableCol_data_list::_internal_data(int index) const {
  return data_.Get(index);
}
inline const std::string& TableCol_data_list::data(int index) const {
  // @@protoc_insertion_point(field_get:com.mdb.proto.msg.TableCol.data_list.data)
  return _internal_data(index);
}
inline std::string* TableCol_data_list::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:com.mdb.proto.msg.TableCol.data_list.data)
  return data_.Mutable(index);
}
inline void TableCol_data_list::set_data(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:com.mdb.proto.msg.TableCol.data_list.data)
  data_.Mutable(index)->assign(value);
}
inline void TableCol_data_list::set_data(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:com.mdb.proto.msg.TableCol.data_list.data)
  data_.Mutable(index)->assign(std::move(value));
}
inline void TableCol_data_list::set_data(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.mdb.proto.msg.TableCol.data_list.data)
}
inline void TableCol_data_list::set_data(int index, const void* value, size_t size) {
  data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.mdb.proto.msg.TableCol.data_list.data)
}
inline std::string* TableCol_data_list::_internal_add_data() {
  return data_.Add();
}
inline void TableCol_data_list::add_data(const std::string& value) {
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.mdb.proto.msg.TableCol.data_list.data)
}
inline void TableCol_data_list::add_data(std::string&& value) {
  data_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:com.mdb.proto.msg.TableCol.data_list.data)
}
inline void TableCol_data_list::add_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.mdb.proto.msg.TableCol.data_list.data)
}
inline void TableCol_data_list::add_data(const void* value, size_t size) {
  data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.mdb.proto.msg.TableCol.data_list.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TableCol_data_list::data() const {
  // @@protoc_insertion_point(field_list:com.mdb.proto.msg.TableCol.data_list.data)
  return data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TableCol_data_list::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:com.mdb.proto.msg.TableCol.data_list.data)
  return &data_;
}

// -------------------------------------------------------------------

// TableCol

// .com.mdb.proto.msg.TableCol.bool_list b = 1;
inline bool TableCol::_internal_has_b() const {
  return varlist_case() == kB;
}
inline bool TableCol::has_b() const {
  return _internal_has_b();
}
inline void TableCol::set_has_b() {
  _oneof_case_[0] = kB;
}
inline void TableCol::clear_b() {
  if (_internal_has_b()) {
    if (GetArena() == nullptr) {
      delete varlist_.b_;
    }
    clear_has_varlist();
  }
}
inline ::com::mdb::proto::msg::TableCol_bool_list* TableCol::release_b() {
  // @@protoc_insertion_point(field_release:com.mdb.proto.msg.TableCol.b)
  if (_internal_has_b()) {
    clear_has_varlist();
      ::com::mdb::proto::msg::TableCol_bool_list* temp = varlist_.b_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    varlist_.b_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::mdb::proto::msg::TableCol_bool_list& TableCol::_internal_b() const {
  return _internal_has_b()
      ? *varlist_.b_
      : *reinterpret_cast< ::com::mdb::proto::msg::TableCol_bool_list*>(&::com::mdb::proto::msg::_TableCol_bool_list_default_instance_);
}
inline const ::com::mdb::proto::msg::TableCol_bool_list& TableCol::b() const {
  // @@protoc_insertion_point(field_get:com.mdb.proto.msg.TableCol.b)
  return _internal_b();
}
inline ::com::mdb::proto::msg::TableCol_bool_list* TableCol::unsafe_arena_release_b() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.mdb.proto.msg.TableCol.b)
  if (_internal_has_b()) {
    clear_has_varlist();
    ::com::mdb::proto::msg::TableCol_bool_list* temp = varlist_.b_;
    varlist_.b_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TableCol::unsafe_arena_set_allocated_b(::com::mdb::proto::msg::TableCol_bool_list* b) {
  clear_varlist();
  if (b) {
    set_has_b();
    varlist_.b_ = b;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.mdb.proto.msg.TableCol.b)
}
inline ::com::mdb::proto::msg::TableCol_bool_list* TableCol::_internal_mutable_b() {
  if (!_internal_has_b()) {
    clear_varlist();
    set_has_b();
    varlist_.b_ = CreateMaybeMessage< ::com::mdb::proto::msg::TableCol_bool_list >(GetArena());
  }
  return varlist_.b_;
}
inline ::com::mdb::proto::msg::TableCol_bool_list* TableCol::mutable_b() {
  // @@protoc_insertion_point(field_mutable:com.mdb.proto.msg.TableCol.b)
  return _internal_mutable_b();
}

// .com.mdb.proto.msg.TableCol.uint32_list u32 = 2;
inline bool TableCol::_internal_has_u32() const {
  return varlist_case() == kU32;
}
inline bool TableCol::has_u32() const {
  return _internal_has_u32();
}
inline void TableCol::set_has_u32() {
  _oneof_case_[0] = kU32;
}
inline void TableCol::clear_u32() {
  if (_internal_has_u32()) {
    if (GetArena() == nullptr) {
      delete varlist_.u32_;
    }
    clear_has_varlist();
  }
}
inline ::com::mdb::proto::msg::TableCol_uint32_list* TableCol::release_u32() {
  // @@protoc_insertion_point(field_release:com.mdb.proto.msg.TableCol.u32)
  if (_internal_has_u32()) {
    clear_has_varlist();
      ::com::mdb::proto::msg::TableCol_uint32_list* temp = varlist_.u32_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    varlist_.u32_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::mdb::proto::msg::TableCol_uint32_list& TableCol::_internal_u32() const {
  return _internal_has_u32()
      ? *varlist_.u32_
      : *reinterpret_cast< ::com::mdb::proto::msg::TableCol_uint32_list*>(&::com::mdb::proto::msg::_TableCol_uint32_list_default_instance_);
}
inline const ::com::mdb::proto::msg::TableCol_uint32_list& TableCol::u32() const {
  // @@protoc_insertion_point(field_get:com.mdb.proto.msg.TableCol.u32)
  return _internal_u32();
}
inline ::com::mdb::proto::msg::TableCol_uint32_list* TableCol::unsafe_arena_release_u32() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.mdb.proto.msg.TableCol.u32)
  if (_internal_has_u32()) {
    clear_has_varlist();
    ::com::mdb::proto::msg::TableCol_uint32_list* temp = varlist_.u32_;
    varlist_.u32_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TableCol::unsafe_arena_set_allocated_u32(::com::mdb::proto::msg::TableCol_uint32_list* u32) {
  clear_varlist();
  if (u32) {
    set_has_u32();
    varlist_.u32_ = u32;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.mdb.proto.msg.TableCol.u32)
}
inline ::com::mdb::proto::msg::TableCol_uint32_list* TableCol::_internal_mutable_u32() {
  if (!_internal_has_u32()) {
    clear_varlist();
    set_has_u32();
    varlist_.u32_ = CreateMaybeMessage< ::com::mdb::proto::msg::TableCol_uint32_list >(GetArena());
  }
  return varlist_.u32_;
}
inline ::com::mdb::proto::msg::TableCol_uint32_list* TableCol::mutable_u32() {
  // @@protoc_insertion_point(field_mutable:com.mdb.proto.msg.TableCol.u32)
  return _internal_mutable_u32();
}

// .com.mdb.proto.msg.TableCol.sint32_list i32 = 3;
inline bool TableCol::_internal_has_i32() const {
  return varlist_case() == kI32;
}
inline bool TableCol::has_i32() const {
  return _internal_has_i32();
}
inline void TableCol::set_has_i32() {
  _oneof_case_[0] = kI32;
}
inline void TableCol::clear_i32() {
  if (_internal_has_i32()) {
    if (GetArena() == nullptr) {
      delete varlist_.i32_;
    }
    clear_has_varlist();
  }
}
inline ::com::mdb::proto::msg::TableCol_sint32_list* TableCol::release_i32() {
  // @@protoc_insertion_point(field_release:com.mdb.proto.msg.TableCol.i32)
  if (_internal_has_i32()) {
    clear_has_varlist();
      ::com::mdb::proto::msg::TableCol_sint32_list* temp = varlist_.i32_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    varlist_.i32_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::mdb::proto::msg::TableCol_sint32_list& TableCol::_internal_i32() const {
  return _internal_has_i32()
      ? *varlist_.i32_
      : *reinterpret_cast< ::com::mdb::proto::msg::TableCol_sint32_list*>(&::com::mdb::proto::msg::_TableCol_sint32_list_default_instance_);
}
inline const ::com::mdb::proto::msg::TableCol_sint32_list& TableCol::i32() const {
  // @@protoc_insertion_point(field_get:com.mdb.proto.msg.TableCol.i32)
  return _internal_i32();
}
inline ::com::mdb::proto::msg::TableCol_sint32_list* TableCol::unsafe_arena_release_i32() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.mdb.proto.msg.TableCol.i32)
  if (_internal_has_i32()) {
    clear_has_varlist();
    ::com::mdb::proto::msg::TableCol_sint32_list* temp = varlist_.i32_;
    varlist_.i32_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TableCol::unsafe_arena_set_allocated_i32(::com::mdb::proto::msg::TableCol_sint32_list* i32) {
  clear_varlist();
  if (i32) {
    set_has_i32();
    varlist_.i32_ = i32;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.mdb.proto.msg.TableCol.i32)
}
inline ::com::mdb::proto::msg::TableCol_sint32_list* TableCol::_internal_mutable_i32() {
  if (!_internal_has_i32()) {
    clear_varlist();
    set_has_i32();
    varlist_.i32_ = CreateMaybeMessage< ::com::mdb::proto::msg::TableCol_sint32_list >(GetArena());
  }
  return varlist_.i32_;
}
inline ::com::mdb::proto::msg::TableCol_sint32_list* TableCol::mutable_i32() {
  // @@protoc_insertion_point(field_mutable:com.mdb.proto.msg.TableCol.i32)
  return _internal_mutable_i32();
}

// .com.mdb.proto.msg.TableCol.uint64_list u64 = 4;
inline bool TableCol::_internal_has_u64() const {
  return varlist_case() == kU64;
}
inline bool TableCol::has_u64() const {
  return _internal_has_u64();
}
inline void TableCol::set_has_u64() {
  _oneof_case_[0] = kU64;
}
inline void TableCol::clear_u64() {
  if (_internal_has_u64()) {
    if (GetArena() == nullptr) {
      delete varlist_.u64_;
    }
    clear_has_varlist();
  }
}
inline ::com::mdb::proto::msg::TableCol_uint64_list* TableCol::release_u64() {
  // @@protoc_insertion_point(field_release:com.mdb.proto.msg.TableCol.u64)
  if (_internal_has_u64()) {
    clear_has_varlist();
      ::com::mdb::proto::msg::TableCol_uint64_list* temp = varlist_.u64_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    varlist_.u64_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::mdb::proto::msg::TableCol_uint64_list& TableCol::_internal_u64() const {
  return _internal_has_u64()
      ? *varlist_.u64_
      : *reinterpret_cast< ::com::mdb::proto::msg::TableCol_uint64_list*>(&::com::mdb::proto::msg::_TableCol_uint64_list_default_instance_);
}
inline const ::com::mdb::proto::msg::TableCol_uint64_list& TableCol::u64() const {
  // @@protoc_insertion_point(field_get:com.mdb.proto.msg.TableCol.u64)
  return _internal_u64();
}
inline ::com::mdb::proto::msg::TableCol_uint64_list* TableCol::unsafe_arena_release_u64() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.mdb.proto.msg.TableCol.u64)
  if (_internal_has_u64()) {
    clear_has_varlist();
    ::com::mdb::proto::msg::TableCol_uint64_list* temp = varlist_.u64_;
    varlist_.u64_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TableCol::unsafe_arena_set_allocated_u64(::com::mdb::proto::msg::TableCol_uint64_list* u64) {
  clear_varlist();
  if (u64) {
    set_has_u64();
    varlist_.u64_ = u64;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.mdb.proto.msg.TableCol.u64)
}
inline ::com::mdb::proto::msg::TableCol_uint64_list* TableCol::_internal_mutable_u64() {
  if (!_internal_has_u64()) {
    clear_varlist();
    set_has_u64();
    varlist_.u64_ = CreateMaybeMessage< ::com::mdb::proto::msg::TableCol_uint64_list >(GetArena());
  }
  return varlist_.u64_;
}
inline ::com::mdb::proto::msg::TableCol_uint64_list* TableCol::mutable_u64() {
  // @@protoc_insertion_point(field_mutable:com.mdb.proto.msg.TableCol.u64)
  return _internal_mutable_u64();
}

// .com.mdb.proto.msg.TableCol.sint64_list i64 = 5;
inline bool TableCol::_internal_has_i64() const {
  return varlist_case() == kI64;
}
inline bool TableCol::has_i64() const {
  return _internal_has_i64();
}
inline void TableCol::set_has_i64() {
  _oneof_case_[0] = kI64;
}
inline void TableCol::clear_i64() {
  if (_internal_has_i64()) {
    if (GetArena() == nullptr) {
      delete varlist_.i64_;
    }
    clear_has_varlist();
  }
}
inline ::com::mdb::proto::msg::TableCol_sint64_list* TableCol::release_i64() {
  // @@protoc_insertion_point(field_release:com.mdb.proto.msg.TableCol.i64)
  if (_internal_has_i64()) {
    clear_has_varlist();
      ::com::mdb::proto::msg::TableCol_sint64_list* temp = varlist_.i64_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    varlist_.i64_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::mdb::proto::msg::TableCol_sint64_list& TableCol::_internal_i64() const {
  return _internal_has_i64()
      ? *varlist_.i64_
      : *reinterpret_cast< ::com::mdb::proto::msg::TableCol_sint64_list*>(&::com::mdb::proto::msg::_TableCol_sint64_list_default_instance_);
}
inline const ::com::mdb::proto::msg::TableCol_sint64_list& TableCol::i64() const {
  // @@protoc_insertion_point(field_get:com.mdb.proto.msg.TableCol.i64)
  return _internal_i64();
}
inline ::com::mdb::proto::msg::TableCol_sint64_list* TableCol::unsafe_arena_release_i64() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.mdb.proto.msg.TableCol.i64)
  if (_internal_has_i64()) {
    clear_has_varlist();
    ::com::mdb::proto::msg::TableCol_sint64_list* temp = varlist_.i64_;
    varlist_.i64_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TableCol::unsafe_arena_set_allocated_i64(::com::mdb::proto::msg::TableCol_sint64_list* i64) {
  clear_varlist();
  if (i64) {
    set_has_i64();
    varlist_.i64_ = i64;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.mdb.proto.msg.TableCol.i64)
}
inline ::com::mdb::proto::msg::TableCol_sint64_list* TableCol::_internal_mutable_i64() {
  if (!_internal_has_i64()) {
    clear_varlist();
    set_has_i64();
    varlist_.i64_ = CreateMaybeMessage< ::com::mdb::proto::msg::TableCol_sint64_list >(GetArena());
  }
  return varlist_.i64_;
}
inline ::com::mdb::proto::msg::TableCol_sint64_list* TableCol::mutable_i64() {
  // @@protoc_insertion_point(field_mutable:com.mdb.proto.msg.TableCol.i64)
  return _internal_mutable_i64();
}

// .com.mdb.proto.msg.TableCol.float_list f32 = 6;
inline bool TableCol::_internal_has_f32() const {
  return varlist_case() == kF32;
}
inline bool TableCol::has_f32() const {
  return _internal_has_f32();
}
inline void TableCol::set_has_f32() {
  _oneof_case_[0] = kF32;
}
inline void TableCol::clear_f32() {
  if (_internal_has_f32()) {
    if (GetArena() == nullptr) {
      delete varlist_.f32_;
    }
    clear_has_varlist();
  }
}
inline ::com::mdb::proto::msg::TableCol_float_list* TableCol::release_f32() {
  // @@protoc_insertion_point(field_release:com.mdb.proto.msg.TableCol.f32)
  if (_internal_has_f32()) {
    clear_has_varlist();
      ::com::mdb::proto::msg::TableCol_float_list* temp = varlist_.f32_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    varlist_.f32_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::mdb::proto::msg::TableCol_float_list& TableCol::_internal_f32() const {
  return _internal_has_f32()
      ? *varlist_.f32_
      : *reinterpret_cast< ::com::mdb::proto::msg::TableCol_float_list*>(&::com::mdb::proto::msg::_TableCol_float_list_default_instance_);
}
inline const ::com::mdb::proto::msg::TableCol_float_list& TableCol::f32() const {
  // @@protoc_insertion_point(field_get:com.mdb.proto.msg.TableCol.f32)
  return _internal_f32();
}
inline ::com::mdb::proto::msg::TableCol_float_list* TableCol::unsafe_arena_release_f32() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.mdb.proto.msg.TableCol.f32)
  if (_internal_has_f32()) {
    clear_has_varlist();
    ::com::mdb::proto::msg::TableCol_float_list* temp = varlist_.f32_;
    varlist_.f32_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TableCol::unsafe_arena_set_allocated_f32(::com::mdb::proto::msg::TableCol_float_list* f32) {
  clear_varlist();
  if (f32) {
    set_has_f32();
    varlist_.f32_ = f32;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.mdb.proto.msg.TableCol.f32)
}
inline ::com::mdb::proto::msg::TableCol_float_list* TableCol::_internal_mutable_f32() {
  if (!_internal_has_f32()) {
    clear_varlist();
    set_has_f32();
    varlist_.f32_ = CreateMaybeMessage< ::com::mdb::proto::msg::TableCol_float_list >(GetArena());
  }
  return varlist_.f32_;
}
inline ::com::mdb::proto::msg::TableCol_float_list* TableCol::mutable_f32() {
  // @@protoc_insertion_point(field_mutable:com.mdb.proto.msg.TableCol.f32)
  return _internal_mutable_f32();
}

// .com.mdb.proto.msg.TableCol.double_list f64 = 7;
inline bool TableCol::_internal_has_f64() const {
  return varlist_case() == kF64;
}
inline bool TableCol::has_f64() const {
  return _internal_has_f64();
}
inline void TableCol::set_has_f64() {
  _oneof_case_[0] = kF64;
}
inline void TableCol::clear_f64() {
  if (_internal_has_f64()) {
    if (GetArena() == nullptr) {
      delete varlist_.f64_;
    }
    clear_has_varlist();
  }
}
inline ::com::mdb::proto::msg::TableCol_double_list* TableCol::release_f64() {
  // @@protoc_insertion_point(field_release:com.mdb.proto.msg.TableCol.f64)
  if (_internal_has_f64()) {
    clear_has_varlist();
      ::com::mdb::proto::msg::TableCol_double_list* temp = varlist_.f64_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    varlist_.f64_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::mdb::proto::msg::TableCol_double_list& TableCol::_internal_f64() const {
  return _internal_has_f64()
      ? *varlist_.f64_
      : *reinterpret_cast< ::com::mdb::proto::msg::TableCol_double_list*>(&::com::mdb::proto::msg::_TableCol_double_list_default_instance_);
}
inline const ::com::mdb::proto::msg::TableCol_double_list& TableCol::f64() const {
  // @@protoc_insertion_point(field_get:com.mdb.proto.msg.TableCol.f64)
  return _internal_f64();
}
inline ::com::mdb::proto::msg::TableCol_double_list* TableCol::unsafe_arena_release_f64() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.mdb.proto.msg.TableCol.f64)
  if (_internal_has_f64()) {
    clear_has_varlist();
    ::com::mdb::proto::msg::TableCol_double_list* temp = varlist_.f64_;
    varlist_.f64_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TableCol::unsafe_arena_set_allocated_f64(::com::mdb::proto::msg::TableCol_double_list* f64) {
  clear_varlist();
  if (f64) {
    set_has_f64();
    varlist_.f64_ = f64;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.mdb.proto.msg.TableCol.f64)
}
inline ::com::mdb::proto::msg::TableCol_double_list* TableCol::_internal_mutable_f64() {
  if (!_internal_has_f64()) {
    clear_varlist();
    set_has_f64();
    varlist_.f64_ = CreateMaybeMessage< ::com::mdb::proto::msg::TableCol_double_list >(GetArena());
  }
  return varlist_.f64_;
}
inline ::com::mdb::proto::msg::TableCol_double_list* TableCol::mutable_f64() {
  // @@protoc_insertion_point(field_mutable:com.mdb.proto.msg.TableCol.f64)
  return _internal_mutable_f64();
}

// .com.mdb.proto.msg.TableCol.string_list str = 8;
inline bool TableCol::_internal_has_str() const {
  return varlist_case() == kStr;
}
inline bool TableCol::has_str() const {
  return _internal_has_str();
}
inline void TableCol::set_has_str() {
  _oneof_case_[0] = kStr;
}
inline void TableCol::clear_str() {
  if (_internal_has_str()) {
    if (GetArena() == nullptr) {
      delete varlist_.str_;
    }
    clear_has_varlist();
  }
}
inline ::com::mdb::proto::msg::TableCol_string_list* TableCol::release_str() {
  // @@protoc_insertion_point(field_release:com.mdb.proto.msg.TableCol.str)
  if (_internal_has_str()) {
    clear_has_varlist();
      ::com::mdb::proto::msg::TableCol_string_list* temp = varlist_.str_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    varlist_.str_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::mdb::proto::msg::TableCol_string_list& TableCol::_internal_str() const {
  return _internal_has_str()
      ? *varlist_.str_
      : *reinterpret_cast< ::com::mdb::proto::msg::TableCol_string_list*>(&::com::mdb::proto::msg::_TableCol_string_list_default_instance_);
}
inline const ::com::mdb::proto::msg::TableCol_string_list& TableCol::str() const {
  // @@protoc_insertion_point(field_get:com.mdb.proto.msg.TableCol.str)
  return _internal_str();
}
inline ::com::mdb::proto::msg::TableCol_string_list* TableCol::unsafe_arena_release_str() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.mdb.proto.msg.TableCol.str)
  if (_internal_has_str()) {
    clear_has_varlist();
    ::com::mdb::proto::msg::TableCol_string_list* temp = varlist_.str_;
    varlist_.str_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TableCol::unsafe_arena_set_allocated_str(::com::mdb::proto::msg::TableCol_string_list* str) {
  clear_varlist();
  if (str) {
    set_has_str();
    varlist_.str_ = str;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.mdb.proto.msg.TableCol.str)
}
inline ::com::mdb::proto::msg::TableCol_string_list* TableCol::_internal_mutable_str() {
  if (!_internal_has_str()) {
    clear_varlist();
    set_has_str();
    varlist_.str_ = CreateMaybeMessage< ::com::mdb::proto::msg::TableCol_string_list >(GetArena());
  }
  return varlist_.str_;
}
inline ::com::mdb::proto::msg::TableCol_string_list* TableCol::mutable_str() {
  // @@protoc_insertion_point(field_mutable:com.mdb.proto.msg.TableCol.str)
  return _internal_mutable_str();
}

// .com.mdb.proto.msg.TableCol.data_list data = 9;
inline bool TableCol::_internal_has_data() const {
  return varlist_case() == kData;
}
inline bool TableCol::has_data() const {
  return _internal_has_data();
}
inline void TableCol::set_has_data() {
  _oneof_case_[0] = kData;
}
inline void TableCol::clear_data() {
  if (_internal_has_data()) {
    if (GetArena() == nullptr) {
      delete varlist_.data_;
    }
    clear_has_varlist();
  }
}
inline ::com::mdb::proto::msg::TableCol_data_list* TableCol::release_data() {
  // @@protoc_insertion_point(field_release:com.mdb.proto.msg.TableCol.data)
  if (_internal_has_data()) {
    clear_has_varlist();
      ::com::mdb::proto::msg::TableCol_data_list* temp = varlist_.data_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    varlist_.data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::mdb::proto::msg::TableCol_data_list& TableCol::_internal_data() const {
  return _internal_has_data()
      ? *varlist_.data_
      : *reinterpret_cast< ::com::mdb::proto::msg::TableCol_data_list*>(&::com::mdb::proto::msg::_TableCol_data_list_default_instance_);
}
inline const ::com::mdb::proto::msg::TableCol_data_list& TableCol::data() const {
  // @@protoc_insertion_point(field_get:com.mdb.proto.msg.TableCol.data)
  return _internal_data();
}
inline ::com::mdb::proto::msg::TableCol_data_list* TableCol::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.mdb.proto.msg.TableCol.data)
  if (_internal_has_data()) {
    clear_has_varlist();
    ::com::mdb::proto::msg::TableCol_data_list* temp = varlist_.data_;
    varlist_.data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TableCol::unsafe_arena_set_allocated_data(::com::mdb::proto::msg::TableCol_data_list* data) {
  clear_varlist();
  if (data) {
    set_has_data();
    varlist_.data_ = data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.mdb.proto.msg.TableCol.data)
}
inline ::com::mdb::proto::msg::TableCol_data_list* TableCol::_internal_mutable_data() {
  if (!_internal_has_data()) {
    clear_varlist();
    set_has_data();
    varlist_.data_ = CreateMaybeMessage< ::com::mdb::proto::msg::TableCol_data_list >(GetArena());
  }
  return varlist_.data_;
}
inline ::com::mdb::proto::msg::TableCol_data_list* TableCol::mutable_data() {
  // @@protoc_insertion_point(field_mutable:com.mdb.proto.msg.TableCol.data)
  return _internal_mutable_data();
}

inline bool TableCol::has_varlist() const {
  return varlist_case() != VARLIST_NOT_SET;
}
inline void TableCol::clear_has_varlist() {
  _oneof_case_[0] = VARLIST_NOT_SET;
}
inline TableCol::VarlistCase TableCol::varlist_case() const {
  return TableCol::VarlistCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// StdTableData

// repeated .com.mdb.proto.msg.TableCol list = 1;
inline int StdTableData::_internal_list_size() const {
  return list_.size();
}
inline int StdTableData::list_size() const {
  return _internal_list_size();
}
inline void StdTableData::clear_list() {
  list_.Clear();
}
inline ::com::mdb::proto::msg::TableCol* StdTableData::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:com.mdb.proto.msg.StdTableData.list)
  return list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::mdb::proto::msg::TableCol >*
StdTableData::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:com.mdb.proto.msg.StdTableData.list)
  return &list_;
}
inline const ::com::mdb::proto::msg::TableCol& StdTableData::_internal_list(int index) const {
  return list_.Get(index);
}
inline const ::com::mdb::proto::msg::TableCol& StdTableData::list(int index) const {
  // @@protoc_insertion_point(field_get:com.mdb.proto.msg.StdTableData.list)
  return _internal_list(index);
}
inline ::com::mdb::proto::msg::TableCol* StdTableData::_internal_add_list() {
  return list_.Add();
}
inline ::com::mdb::proto::msg::TableCol* StdTableData::add_list() {
  // @@protoc_insertion_point(field_add:com.mdb.proto.msg.StdTableData.list)
  return _internal_add_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::mdb::proto::msg::TableCol >&
StdTableData::list() const {
  // @@protoc_insertion_point(field_list:com.mdb.proto.msg.StdTableData.list)
  return list_;
}

// -------------------------------------------------------------------

// Table

// bytes attr = 1;
inline void Table::clear_attr() {
  attr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Table::attr() const {
  // @@protoc_insertion_point(field_get:com.mdb.proto.msg.Table.attr)
  return _internal_attr();
}
inline void Table::set_attr(const std::string& value) {
  _internal_set_attr(value);
  // @@protoc_insertion_point(field_set:com.mdb.proto.msg.Table.attr)
}
inline std::string* Table::mutable_attr() {
  // @@protoc_insertion_point(field_mutable:com.mdb.proto.msg.Table.attr)
  return _internal_mutable_attr();
}
inline const std::string& Table::_internal_attr() const {
  return attr_.Get();
}
inline void Table::_internal_set_attr(const std::string& value) {
  
  attr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Table::set_attr(std::string&& value) {
  
  attr_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.mdb.proto.msg.Table.attr)
}
inline void Table::set_attr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  attr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.mdb.proto.msg.Table.attr)
}
inline void Table::set_attr(const void* value,
    size_t size) {
  
  attr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.mdb.proto.msg.Table.attr)
}
inline std::string* Table::_internal_mutable_attr() {
  
  return attr_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Table::release_attr() {
  // @@protoc_insertion_point(field_release:com.mdb.proto.msg.Table.attr)
  return attr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Table::set_allocated_attr(std::string* attr) {
  if (attr != nullptr) {
    
  } else {
    
  }
  attr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.mdb.proto.msg.Table.attr)
}
inline std::string* Table::unsafe_arena_release_attr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.mdb.proto.msg.Table.attr)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return attr_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Table::unsafe_arena_set_allocated_attr(
    std::string* attr) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (attr != nullptr) {
    
  } else {
    
  }
  attr_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      attr, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.mdb.proto.msg.Table.attr)
}

// bytes data = 2;
inline void Table::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Table::data() const {
  // @@protoc_insertion_point(field_get:com.mdb.proto.msg.Table.data)
  return _internal_data();
}
inline void Table::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:com.mdb.proto.msg.Table.data)
}
inline std::string* Table::mutable_data() {
  // @@protoc_insertion_point(field_mutable:com.mdb.proto.msg.Table.data)
  return _internal_mutable_data();
}
inline const std::string& Table::_internal_data() const {
  return data_.Get();
}
inline void Table::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Table::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.mdb.proto.msg.Table.data)
}
inline void Table::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.mdb.proto.msg.Table.data)
}
inline void Table::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.mdb.proto.msg.Table.data)
}
inline std::string* Table::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Table::release_data() {
  // @@protoc_insertion_point(field_release:com.mdb.proto.msg.Table.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Table::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.mdb.proto.msg.Table.data)
}
inline std::string* Table::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.mdb.proto.msg.Table.data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Table::unsafe_arena_set_allocated_data(
    std::string* data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data != nullptr) {
    
  } else {
    
  }
  data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.mdb.proto.msg.Table.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace msg
}  // namespace proto
}  // namespace mdb
}  // namespace com

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::com::mdb::proto::msg::MSG_ID_NOTIFY_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::mdb::proto::msg::MSG_ID_NOTIFY_TYPE>() {
  return ::com::mdb::proto::msg::MSG_ID_NOTIFY_TYPE_descriptor();
}
template <> struct is_proto_enum< ::com::mdb::proto::msg::MSG_ID_REQUEST_DO_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::mdb::proto::msg::MSG_ID_REQUEST_DO_TYPE>() {
  return ::com::mdb::proto::msg::MSG_ID_REQUEST_DO_TYPE_descriptor();
}
template <> struct is_proto_enum< ::com::mdb::proto::msg::MSG_ID_REQUEST_QUERY_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::mdb::proto::msg::MSG_ID_REQUEST_QUERY_TYPE>() {
  return ::com::mdb::proto::msg::MSG_ID_REQUEST_QUERY_TYPE_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mdb_2eproto
